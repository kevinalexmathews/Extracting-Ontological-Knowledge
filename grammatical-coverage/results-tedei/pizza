
----------------------------------
Commencing  TOKENS REGEX Module...
---------------------------------
  0,   3,  C2, A vegetarian pizza
  0,   4,  P2, A vegetarian pizza is
  2,   4,  P1, pizza is
  3,   4,  P5,  is
  4,   7,  C3, a tasteful pizza
  0,   4,  C3, An american hot pizza
  0,   5,  P6, An american hot pizza is
  3,   5,  P4, pizza is
  4,   5, P13,  is
  4,   8, P12, is a type of
  5,   7,  C4, a type
  5,   8,  P2, a type of
  5,  10,  C1, a type of american pizza
  8,  10,  C5, american pizza
 11,  12, P14, has
 12,  14,  I0, Jalapeno peppers
 13,  14,  C6, peppers
 13,  15,  P3, peppers on
  0,   3,  C3, An interesting pizza
  0,   4,  P4, An interesting pizza is
  2,   4,  P2, pizza is
  3,   4, P10,  is
  4,   6,  C4, a pizza
  7,   8,  P7, has
  7,   9, P11, has at
 10,  11,  N0,   3
 11,  12,  C5, toppings
  0,   3,  C5, An american pizza
  0,   4,  P6, An american pizza is
  2,   4,  P4, pizza is
  3,   4, P13,  is
  4,   6,  C6, a pizza
  7,   8, P14, has
  7,  10, P12, has toppings of
  8,   9,  C7, toppings
  8,  10,  P3, toppings of
  8,  11,  C2, toppings of pepperoni
 10,  11,  C8, pepperoni
 12,  13,  C9, mozzarella
 14,  15, C10, tomato
  0,   4,  C3, A real italian pizza
  0,   5,  P5, A real italian pizza is
  3,   5,  P3, pizza is
  4,   5, P12,  is
  4,   8, P11, is a type of
  5,   7,  C4, a type
  5,   8,  P2, a type of
  5,   9,  C1, a type of pizza
  8,   9,  C5, pizza
 12,  13, P13, have
 15,  17,  C6, crispy bases
  0,   3,  C2, A spicy pizza
  0,   4,  P4, A spicy pizza has
  2,   4,  P2, pizza has
  3,   4, P10, has
  4,   6,  C3, a spiciness
  7,   8, P11,  is
  0,   3,  C4, A vegetarian pizza
  0,   4,  P6, A vegetarian pizza is
  2,   4,  P4, pizza is
  3,   4, P13,  is
  3,   7, P12, is any pizza that
  4,   6,  C5, any pizza
  4,   7,  P3, any pizza that
  8,   9, P14, has
  8,  11,  P0, has vegetarian toppings
  9,  11,  C6, vegetarian toppings
 12,  14,  C7, no toppings
  0,   3,  C3, A meaty pizza
  0,   4,  P6, A meaty pizza is
  2,   4,  P3, pizza is
  3,   4, P15,  is
  4,   6,  C4, any pizza
  7,   8, P10, has
  7,   9, P16, has at
 10,  11,  N0,   1
 11,  12, P11, topping
 11,  12,  C5, topping
 11,  13, P17, topping of
 11,  14,  C2, topping of meat
 13,  14,  C6, meat
  0,   3,  C4, A soho pizza
  0,   4,  P7, A soho pizza is
  3,   4, P15,  is
  3,   7, P13, is a sort of
  4,   6,  C5, a sort
  4,   7,  P3, a sort of
  4,   9,  C1, a sort of margherita pizza
  7,   9,  C6, margherita pizza
 10,  11, P16, has
 10,  14, P14, has additional toppings of
 11,  13,  C7, additional toppings
 11,  14,  P4, additional toppings of
 11,  15,  C2, additional toppings of olives
 14,  15,  C8, olives
 16,  18,  C9, parmesan cheese
  0,   4,  C3, A non vegetarian pizza
  0,   5,  P4, A non vegetarian pizza is
  3,   5,  P2, pizza is
  4,   5, P10,  is
  5,   7,  C4, any pizza
  8,   9, P11,  is
 10,  13,  C5, a vegetarian pizza
  0,   3,  I0, The Sicilian pizza
  2,   3,  C2, pizza
  2,   4,  P4, pizza is
  3,   4, P10,  is
  4,   6,  C3, a pizza
  7,   9, P11, is originated
  7,  10,  P3, is originated in
 10,  11,  I1, Italy
  0,   2,  I0, Diavolo pizza
  1,   2,  C9, pizza
  1,   3,  P5, pizza is
  2,   3, P11,  is
  3,   6, C10, an interesting pizza
  7,   8, P12, has
  7,  11,  P0, has hot spiced beef
  8,  11, C11, hot spiced beef
 12,  13, C12, pepperoni
 14,  15, C13, mozzarella
 16,  17, C14, tomato
 18,  20, C15, green pepper
 21,  23, C16, red onion
 24,  25,  C8, tabasco
  0,   3,  I0, Pollo Forza Pizza
  3,   4, P21,  is
  4,   7,  C5, a fiery pizza
  8,  10, P22, is made
  8,  11,  P6, is made of
 11,  12,  C6, chicken
 11,  13, P11, chicken marinated
 11,  14,  P7, chicken marinated in
 12,  13, P15, marinated
 12,  14, P23, marinated in
 14,  17,  C7, smoky chilli powder
 18,  19,  C8, garlic
 20,  21, P24, dried
 20,  23,  P8, dried chilli flakes
 21,  23,  C9, chilli flakes
  0,   2,  I0, Luhjuhman pizza
  1,   2,  C5, pizza
  1,   3,  P4, pizza is
  2,   3, P11,  is
  2,   7, P10, is a pizza made with
  3,   5,  C6, a pizza
  3,   6,  P5, a pizza made
  3,   7,  P3, a pizza made with
  5,   6,  P7, made
  5,   7, P12, made with
  7,   8,  C7, lamb
  9,  10,  C8, vegetables
 12,  14,  C9, feta cheese
  1,   2,  N0, four
  2,   4,  C3, seasons pizza
  2,   5,  P4, seasons pizza is
  4,   5, P11,  is
  4,   9, P10, is a pizza finished with
  5,   7,  C4, a pizza
  5,   8,  P5, a pizza finished
  5,   9,  P3, a pizza finished with
  7,   8,  P7, finished
  7,   9, P12, finished with
  9,  10,  C5, olives
  0,   4,  I0, A Quattro Formaggi pizza
  3,   4,  C3, pizza
  3,   5,  P6, pizza is
  4,   5, P15,  is
  5,   7,  C4, a pizza
  8,   9, P10, consists
  8,  10, P16, consists of
 10,  13,  P8, a delicious blend
 12,  13, P11, blend
 12,  14, P17, blend of
 14,  16,  C5, mozzarella cheese
  0,   3, C10, A gardiniera pizza
  0,   5,  P5, A gardiniera pizza is made
  0,   6,  P3, A gardiniera pizza is made with
  3,   5, P11, is made
  3,   6,  P1, is made with
  6,   7, C11, artichokes
  8,   9, C12, mushrooms
 10,  12, C13, red peppers
 13,  14, P12, marinated
 13,  16,  P4, marinated santos tomatoes
 13,  16, C20, marinated santos tomatoes
 14,  16, C14, santos tomatoes
 17,  18, C15, leeks
 19,  20, C16, olives
 21,  23, C17, garlic oil
 24,  25, C18, tomato
 26,  28,  C9, pesto base
  0,   2,  I0, Caprina pizza
  1,   2,  C4, pizza
  1,   3,  P6, pizza is
  2,   3, P16,  is
  2,   8, P15, is a pizza dough filled with
  3,   6,  C5, a pizza dough
  3,   7,  P7, a pizza dough filled
  3,   8,  P4, a pizza dough filled with
  6,   7, P10, filled
  6,   8, P17, filled with
  8,  10,  C6, goat cheese
 11,  12, P11, served
 11,  13, P18, served with
 13,  16,  C7, homemade tomato marmalade
  0,   2,  I0, Caprina Pizza
  2,   3,  P5, has
  5,   7,  C1, high-calorie content
  0,   3,  C4, Sloppy giuseppe pizza
  0,   5,  P2, Sloppy giuseppe pizza is topped
  1,   6,  P1, giuseppe pizza is topped with
  3,   5,  P5, is topped
  3,   6,  P0, is topped with
  6,   7,  C5, mozzarella
  8,   9,  C6, parmesan
 10,  13,  C7, rich Bolognese ragu
  0,   2,  I0, Pianta Pizza
  2,   4, P16, is topped
  2,   5,  P4, is topped with
  5,   6,  C6, spinach
  7,   9,  C7, chestnut mushrooms
 10,  11, P17, pine
 10,  12,  P5, pine kernels
 11,  12,  C8, kernels
 13,  14,  C9, artichoke
 16,  17, P12, finished
 16,  18, P18, finished with
 18,  19, C10, rocket
 20,  24, C11, extra virgin olive oil
  0,   3,  I0, Frutti di Mare
  4,   5,  P6, lacks
  4,   6,  P2, lacks cheese
  5,   6,  C1, cheese
  0,   3,  I0, Frutti di Mare
  3,   5, P10, is made
  3,   6,  P2, is made with
  6,   9,  C2, the seafood being
  6,  10,  P5, the seafood being served
  6,  11,  P3, the seafood being served atop
  8,  10, P11, being served
  8,  11,  P1, being served atop
 11,  14,  C3, a tomato sauce
  0,   4,  I0, The Prince Carlo pizza
  3,   4,  C5, pizza
  3,   5,  P4, pizza is
  4,   5, P10,  is
  5,   7,  C6, a pizza
  8,   9,  P7, contains
  8,  10, P11, contains among
 10,  12,  C7, other ingredients
 13,  14,  C8, leeks
 15,  16,  C9, rosemary
  0,   4,  I0, Pollo Ad Astra pizza
  3,   4,  C7, pizza
  3,   5,  P6, pizza is
  4,   5, P13,  is
  4,   8, P12, is a kind of
  5,   7,  C8, a kind
  5,   8,  P3, a kind of
  5,   9,  C1, a kind of pizza
  8,   9,  C9, pizza
 10,  11, P14, contains
 10,  12,  P5, contains chicken
 11,  12, C10, chicken
 13,  16, C11, sweet peppadew peppers
 17,  19, C12, cajun spices
 20,  22, C13, garlic oil
 23,  25, C14, red onions
  Total input sentences:   25
        Total sentences:  677

-------------------------------------------
Commencing  SYNTACTIC TRANSFORMER Module...
-------------------------------------------
Input Text: A vegetarian pizza is a tasteful pizza.
TString: C2 P5 C3 . 
Parse Tree: (start (lexpr C2) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P5 (classCombo C3))))))) .)
	 Lexpr1Context:={Every, A} n:vegetarian-pizza
	 ClassComboContext:= n:tasteful, n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:tasteful and is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:tasteful and is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:tasteful and is {a}  n:a-pizza
	 IntersectionOf1Context:= is {a}  n:tasteful and is {a}  n:a-pizza
	 UnionOf1Context:= is {a}  n:tasteful and is {a}  n:a-pizza
	 RexprContext:= is {a}  n:tasteful and is {a}  n:a-pizza
	 StartContext:={Every, A} n:vegetarian-pizza is {a}  n:tasteful and is {a}  n:a-pizza.
SynTrans Text: {Every, A} n:vegetarian-pizza is {a}  n:tasteful and is {a}  n:a-pizza.

Input Text: A vegetarian pizza is a tasteful pizza.
TString: C2 P1 C3 . 
Parse Tree: (start (lexpr C2) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P1 (classCombo C3))))))) .)
	 Lexpr1Context:={Every, A} n:vegetarian-pizza
	 ClassComboContext:= n:tasteful, n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:tasteful and v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:tasteful and v:pizza-is {a}  n:a-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:tasteful and v:pizza-is {a}  n:a-pizza
	 IntersectionOf1Context:= v:pizza-is {a}  n:tasteful and v:pizza-is {a}  n:a-pizza
	 UnionOf1Context:= v:pizza-is {a}  n:tasteful and v:pizza-is {a}  n:a-pizza
	 RexprContext:= v:pizza-is {a}  n:tasteful and v:pizza-is {a}  n:a-pizza
	 StartContext:={Every, A} n:vegetarian-pizza v:pizza-is {a}  n:tasteful and v:pizza-is {a}  n:a-pizza.
SynTrans Text: {Every, A} n:vegetarian-pizza v:pizza-is {a}  n:tasteful and v:pizza-is {a}  n:a-pizza.

Input Text: A vegetarian pizza is a tasteful pizza.
TString: P1 P5 C3 . 
Parse Tree: (start lexpr (rexpr (unionOf P1 P5 C3)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is a tasteful pizza.
TString: P2 P5 C3 . 
Parse Tree: (start lexpr (rexpr (unionOf P2 P5 C3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P13 C4 of C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C4))) (soloCombo (solo (classCombo C5)))) that (intersectionOf (soloCombo (solo (someValuesFrom P14 a (classCombo C6))) (soloCombo solo) (soloCombo (solo P3))))))) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C4))) (soloCombo (solo (classCombo C5)))) that (intersectionOf (soloCombo (solo (hasValue P14 I0)) (soloCombo solo) (soloCombo (solo P3))))))) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P13 C4 of C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 C4 C5 that P14 a C6 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P13 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 C4 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C4 of C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C4 C5 that P14 a C6 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C4 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P12 C4 of C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P12 C4 C5 that P14 a C6 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P12 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P12 C4 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P13 P2 C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P13 P2 C5 that P14 a C6 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P13 P2 C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P13 P2 C5 that P14 a C6 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P13 P2 C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 P2 C5 that P14 a C6 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P13 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P13 P2 C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 P2 C5 that P14 a C6 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P13 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C5 that P14 a C6 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C1 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C1 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C5 that P14 a C6 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C1 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C1 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P12 C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P12 C5 that P14 a C6 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P12 C1 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P12 C1 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P12 C5 that P14 Jalapeno C6 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P12 C5 that P14 a C6 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P12 C1 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P12 C1 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P13 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C4))) (soloCombo (solo (classCombo C5)))) that (intersectionOf (soloCombo (solo (hasValue P14 I0)) (soloCombo solo) (soloCombo (solo P3))))))) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C4))) (soloCombo (solo (classCombo C5)))) that (intersectionOf (soloCombo (solo (hasValue P14 I0)) (soloCombo solo) (soloCombo (solo P3))))))) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P13 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 C4 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P13 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 C4 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C4 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C4 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P12 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P12 C4 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P12 C4 of C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P12 C4 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P13 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P13 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P13 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P13 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P13 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P13 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P13 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P13 P2 C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 P2 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C1 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C1 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C5 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: C3 P4 P12 C1 that P14 I0 P3 it . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P4 P12 C1 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P12 C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P12 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P12 C1 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P12 C1 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P4 P12 C5 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P12 C5 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An american hot pizza is a type of american pizza that has Jalapeno peppers on it.
TString: P6 P12 C1 that P14 I0 P3 it . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P12 C1 that P14 I0 P3)) .)
Invalid TEDEI!

Input Text: An interesting pizza is a pizza that has at least 3 toppings.
TString: C3 P10 C4 that P7 at least N0 C5 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P7 at least N0 (classCombo C5)))))))) .)
	 Lexpr1Context:={Every, A} n:interesting-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:toppings
	 QualifiedMinContext:=v:has at least 3 n:toppings
	 SoloQualMinContext:=v:has at least 3 n:toppings
	 ComboSoloContext:=v:has at least 3 n:toppings
	 IntersectionOf1Context:=v:has at least 3 n:toppings
	 IntersectionOf1Context:= is {a}  n:a-pizza and v:has at least 3 n:toppings
	 UnionOf1Context:= is {a}  n:a-pizza and v:has at least 3 n:toppings
	 RexprContext:= is {a}  n:a-pizza and v:has at least 3 n:toppings
	 StartContext:={Every, A} n:interesting-pizza is {a}  n:a-pizza and v:has at least 3 n:toppings.
SynTrans Text: {Every, A} n:interesting-pizza is {a}  n:a-pizza and v:has at least 3 n:toppings.

Input Text: An interesting pizza is a pizza that has at least 3 toppings.
TString: C3 P2 C4 that P7 at least N0 C5 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P2 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P7 at least N0 (classCombo C5)))))))) .)
	 Lexpr1Context:={Every, A} n:interesting-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza
	 ClassComboContext:= n:toppings
	 QualifiedMinContext:=v:has at least 3 n:toppings
	 SoloQualMinContext:=v:has at least 3 n:toppings
	 ComboSoloContext:=v:has at least 3 n:toppings
	 IntersectionOf1Context:=v:has at least 3 n:toppings
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and v:has at least 3 n:toppings
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and v:has at least 3 n:toppings
	 RexprContext:= v:pizza-is {a}  n:a-pizza and v:has at least 3 n:toppings
	 StartContext:={Every, A} n:interesting-pizza v:pizza-is {a}  n:a-pizza and v:has at least 3 n:toppings.
SynTrans Text: {Every, A} n:interesting-pizza v:pizza-is {a}  n:a-pizza and v:has at least 3 n:toppings.

Input Text: An interesting pizza is a pizza that has at least 3 toppings.
TString: P2 P10 C4 that P7 at least N0 C5 . 
Parse Tree: (start lexpr (rexpr (unionOf P2 P10 C4 that P7 at least N0 C5)) .)
Invalid TEDEI!

Input Text: An interesting pizza is a pizza that has at least 3 toppings.
TString: P4 P10 C4 that P7 at least N0 C5 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P10 C4 that P7 at least N0 C5)) .)
Invalid TEDEI!

Input Text: An interesting pizza is a pizza that has at least 3 toppings.
TString: C3 P10 C4 that P11 least N0 C5 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P11 least N0 (classCombo C5)))))))) .)
	 Lexpr1Context:={Every, A} n:interesting-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:toppings
	 QualifiedMinContext:=v:has-at at least 3 n:toppings
	 SoloQualMinContext:=v:has-at at least 3 n:toppings
	 ComboSoloContext:=v:has-at at least 3 n:toppings
	 IntersectionOf1Context:=v:has-at at least 3 n:toppings
	 IntersectionOf1Context:= is {a}  n:a-pizza and v:has-at at least 3 n:toppings
	 UnionOf1Context:= is {a}  n:a-pizza and v:has-at at least 3 n:toppings
	 RexprContext:= is {a}  n:a-pizza and v:has-at at least 3 n:toppings
	 StartContext:={Every, A} n:interesting-pizza is {a}  n:a-pizza and v:has-at at least 3 n:toppings.
SynTrans Text: {Every, A} n:interesting-pizza is {a}  n:a-pizza and v:has-at at least 3 n:toppings.

Input Text: An interesting pizza is a pizza that has at least 3 toppings.
TString: C3 P2 C4 that P11 least N0 C5 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P2 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P11 least N0 (classCombo C5)))))))) .)
	 Lexpr1Context:={Every, A} n:interesting-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza
	 ClassComboContext:= n:toppings
	 QualifiedMinContext:=v:has-at at least 3 n:toppings
	 SoloQualMinContext:=v:has-at at least 3 n:toppings
	 ComboSoloContext:=v:has-at at least 3 n:toppings
	 IntersectionOf1Context:=v:has-at at least 3 n:toppings
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and v:has-at at least 3 n:toppings
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and v:has-at at least 3 n:toppings
	 RexprContext:= v:pizza-is {a}  n:a-pizza and v:has-at at least 3 n:toppings
	 StartContext:={Every, A} n:interesting-pizza v:pizza-is {a}  n:a-pizza and v:has-at at least 3 n:toppings.
SynTrans Text: {Every, A} n:interesting-pizza v:pizza-is {a}  n:a-pizza and v:has-at at least 3 n:toppings.

Input Text: An interesting pizza is a pizza that has at least 3 toppings.
TString: P2 P10 C4 that P11 least N0 C5 . 
Parse Tree: (start lexpr (rexpr (unionOf P2 P10 C4 that P11 least N0 C5)) .)
Invalid TEDEI!

Input Text: An interesting pizza is a pizza that has at least 3 toppings.
TString: P4 P10 C4 that P11 least N0 C5 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P10 C4 that P11 least N0 C5)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P13 C6 which P14 C7 of C8 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C7))) (soloCombo (solo (classCombo C8 , (classCombo C9 and (classCombo C10)))))))))) .)
	 Lexpr1Context:={Every, A} n:american-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:toppings
	 SomeValuesFrom2Context:= v:has {a}  n:toppings
	 SoloSomeContext:= v:has {a}  n:toppings
	 ClassComboContext:= n:tomato
	 ClassComboContext:= n:mozzarella and n:tomato
	 ClassComboContext:= n:pepperoni , n:mozzarella and n:tomato
	 SoloClsContext:= n:pepperoni , n:mozzarella and n:tomato
	 ComboSoloContext:= n:pepperoni , n:mozzarella and n:tomato
	 ComboSoloContext:= v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 IntersectionOf1Context:= v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 UnionOf1Context:= is {a}  n:a-pizza and  v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 RexprContext:= is {a}  n:a-pizza and  v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 StartContext:={Every, A} n:american-pizza is {a}  n:a-pizza and  v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato.
SynTrans Text: {Every, A} n:american-pizza is {a}  n:a-pizza and  v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato.

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P4 C6 which P14 C7 of C8 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C7))) (soloCombo (solo (classCombo C8 , (classCombo C9 and (classCombo C10)))))))))) .)
	 Lexpr1Context:={Every, A} n:american-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza
	 ClassComboContext:= n:toppings
	 SomeValuesFrom2Context:= v:has {a}  n:toppings
	 SoloSomeContext:= v:has {a}  n:toppings
	 ClassComboContext:= n:tomato
	 ClassComboContext:= n:mozzarella and n:tomato
	 ClassComboContext:= n:pepperoni , n:mozzarella and n:tomato
	 SoloClsContext:= n:pepperoni , n:mozzarella and n:tomato
	 ComboSoloContext:= n:pepperoni , n:mozzarella and n:tomato
	 ComboSoloContext:= v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 IntersectionOf1Context:= v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 RexprContext:= v:pizza-is {a}  n:a-pizza and  v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 StartContext:={Every, A} n:american-pizza v:pizza-is {a}  n:a-pizza and  v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato.
SynTrans Text: {Every, A} n:american-pizza v:pizza-is {a}  n:a-pizza and  v:has {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato.

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P4 P13 C6 which P14 C7 of C8 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 C6 which P14 C7 C8 , C9 and C10)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P6 P13 C6 which P14 C7 of C8 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 C6 which P14 C7 C8 , C9 and C10)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P13 C6 which P12 C7 of C8 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C7))) (soloCombo (solo (classCombo C8 , (classCombo C9 and (classCombo C10)))))))))) .)
	 Lexpr1Context:={Every, A} n:american-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:toppings
	 SomeValuesFrom2Context:= v:has-toppings-of {a}  n:toppings
	 SoloSomeContext:= v:has-toppings-of {a}  n:toppings
	 ClassComboContext:= n:tomato
	 ClassComboContext:= n:mozzarella and n:tomato
	 ClassComboContext:= n:pepperoni , n:mozzarella and n:tomato
	 SoloClsContext:= n:pepperoni , n:mozzarella and n:tomato
	 ComboSoloContext:= n:pepperoni , n:mozzarella and n:tomato
	 ComboSoloContext:= v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 IntersectionOf1Context:= v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 UnionOf1Context:= is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 RexprContext:= is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 StartContext:={Every, A} n:american-pizza is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato.
SynTrans Text: {Every, A} n:american-pizza is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato.

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P4 C6 which P12 C7 of C8 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C7))) (soloCombo (solo (classCombo C8 , (classCombo C9 and (classCombo C10)))))))))) .)
	 Lexpr1Context:={Every, A} n:american-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza
	 ClassComboContext:= n:toppings
	 SomeValuesFrom2Context:= v:has-toppings-of {a}  n:toppings
	 SoloSomeContext:= v:has-toppings-of {a}  n:toppings
	 ClassComboContext:= n:tomato
	 ClassComboContext:= n:mozzarella and n:tomato
	 ClassComboContext:= n:pepperoni , n:mozzarella and n:tomato
	 SoloClsContext:= n:pepperoni , n:mozzarella and n:tomato
	 ComboSoloContext:= n:pepperoni , n:mozzarella and n:tomato
	 ComboSoloContext:= v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 IntersectionOf1Context:= v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 RexprContext:= v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato
	 StartContext:={Every, A} n:american-pizza v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato.
SynTrans Text: {Every, A} n:american-pizza v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings and  n:pepperoni , n:mozzarella and n:tomato.

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P4 P13 C6 which P12 C7 of C8 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 C6 which P12 C7 C8 , C9 and C10)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P6 P13 C6 which P12 C7 of C8 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 C6 which P12 C7 C8 , C9 and C10)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P13 C6 which P14 P3 C8 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P14) (soloCombo (solo (someValuesFrom P3 (classCombo C8 , (classCombo C9 and (classCombo C10)))))))))))) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P4 C6 which P14 P3 C8 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P14) (soloCombo (solo (someValuesFrom P3 (classCombo C8 , (classCombo C9 and (classCombo C10)))))))))))) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P13 C6 which P14 P3 C8 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P14) (soloCombo (solo (someValuesFrom P3 (classCombo C8 , (classCombo C9 and (classCombo C10)))))))))))) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P4 C6 which P14 P3 C8 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P14) (soloCombo (solo (someValuesFrom P3 (classCombo C8 , (classCombo C9 and (classCombo C10)))))))))))) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P4 P13 C6 which P14 P3 C8 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 C6 which P14 P3 C8 , C9 and C10)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P6 P13 C6 which P14 P3 C8 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 C6 which P14 P3 C8 , C9 and C10)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P4 P13 C6 which P14 P3 C8 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 C6 which P14 P3 C8 , C9 and C10)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P6 P13 C6 which P14 P3 C8 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 C6 which P14 P3 C8 , C9 and C10)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P13 C6 which P12 C8 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C8 , (classCombo C9 and (classCombo C10)))))))))) .)
	 Lexpr1Context:={Every, A} n:american-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:tomato
	 ClassComboContext:= n:mozzarella and n:tomato
	 ClassComboContext:= n:pepperoni , n:mozzarella and n:tomato
	 SomeValuesFrom2Context:= v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 SoloSomeContext:= v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 ComboSoloContext:= v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 IntersectionOf1Context:= v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 UnionOf1Context:= is {a}  n:a-pizza and  v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 RexprContext:= is {a}  n:a-pizza and  v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 StartContext:={Every, A} n:american-pizza is {a}  n:a-pizza and  v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato.
SynTrans Text: {Every, A} n:american-pizza is {a}  n:a-pizza and  v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato.

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P4 C6 which P12 C2 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C2 , (classCombo C9 and (classCombo C10)))))))))) .)
	 Lexpr1Context:={Every, A} n:american-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza
	 ClassComboContext:= n:tomato
	 ClassComboContext:= n:mozzarella and n:tomato
	 ClassComboContext:= n:toppings-of-pepperoni , n:mozzarella and n:tomato
	 SomeValuesFrom2Context:= v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 SoloSomeContext:= v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 ComboSoloContext:= v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 IntersectionOf1Context:= v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 RexprContext:= v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 StartContext:={Every, A} n:american-pizza v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato.
SynTrans Text: {Every, A} n:american-pizza v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato.

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P13 C6 which P12 C8 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C8 , (classCombo C9 and (classCombo C10)))))))))) .)
	 Lexpr1Context:={Every, A} n:american-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:tomato
	 ClassComboContext:= n:mozzarella and n:tomato
	 ClassComboContext:= n:pepperoni , n:mozzarella and n:tomato
	 SomeValuesFrom2Context:= v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 SoloSomeContext:= v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 ComboSoloContext:= v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 IntersectionOf1Context:= v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 UnionOf1Context:= is {a}  n:a-pizza and  v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 RexprContext:= is {a}  n:a-pizza and  v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 StartContext:={Every, A} n:american-pizza is {a}  n:a-pizza and  v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato.
SynTrans Text: {Every, A} n:american-pizza is {a}  n:a-pizza and  v:has-toppings-of {a}  n:pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato.

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: C5 P4 C6 which P12 C2 , C9 and C10 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C2 , (classCombo C9 and (classCombo C10)))))))))) .)
	 Lexpr1Context:={Every, A} n:american-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza
	 ClassComboContext:= n:tomato
	 ClassComboContext:= n:mozzarella and n:tomato
	 ClassComboContext:= n:toppings-of-pepperoni , n:mozzarella and n:tomato
	 SomeValuesFrom2Context:= v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 SoloSomeContext:= v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 ComboSoloContext:= v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 IntersectionOf1Context:= v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 RexprContext:= v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato
	 StartContext:={Every, A} n:american-pizza v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato.
SynTrans Text: {Every, A} n:american-pizza v:pizza-is {a}  n:a-pizza and  v:has-toppings-of {a}  n:toppings-of-pepperoni  and v:has-toppings-of {a}  n:mozzarella  and v:has-toppings-of {a}  n:tomato.

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P4 P13 C6 which P12 C8 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 C6 which P12 C8 , C9 and C10)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P6 P13 C6 which P12 C2 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 C6 which P12 C2 , C9 and C10)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P4 P13 C6 which P12 C8 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 C6 which P12 C8 , C9 and C10)) .)
Invalid TEDEI!

Input Text: An american pizza is a pizza which has toppings of pepperoni, mozzarella and tomato.
TString: P6 P13 C6 which P12 C2 , C9 and C10 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 C6 which P12 C2 , C9 and C10)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: C3 P12 C4 of C5 which must only P13 thin and C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C4))) (soloCombo (solo (classCombo C5)))) which (intersectionOf (soloCombo (solo (allValuesFrom only P13 (classCombo and C6)))))))) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: C3 P3 C4 of C5 which must only P13 thin and C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C4))) (soloCombo (solo (classCombo C5)))) which (intersectionOf (soloCombo (solo (allValuesFrom only P13 (classCombo and C6)))))))) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P3 P12 C4 of C5 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P12 C4 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P5 P12 C4 of C5 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P5 P12 C4 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: C3 P3 P11 C4 of C5 which must only P13 thin and C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P3 P11 C4 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P3 P11 C4 of C5 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P11 C4 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P5 P11 C4 of C5 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P5 P11 C4 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: C3 P12 P2 C5 which must only P13 thin and C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P12 P2 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: C3 P3 P2 C5 which must only P13 thin and C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P3 P2 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: C3 P12 P2 C5 which must only P13 thin and C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P12 P2 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: C3 P3 P2 C5 which must only P13 thin and C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P3 P2 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P3 P12 P2 C5 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P12 P2 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P5 P12 P2 C5 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P5 P12 P2 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P3 P12 P2 C5 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P12 P2 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P5 P12 P2 C5 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P5 P12 P2 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: C3 P3 P11 C5 which must only P13 thin and C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P3 P11 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: C3 P3 P11 C1 which must only P13 thin and C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P3 P11 C1 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: C3 P3 P11 C5 which must only P13 thin and C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P3 P11 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: C3 P3 P11 C1 which must only P13 thin and C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf P3 P11 C1 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P3 P11 C5 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P11 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P5 P11 C1 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P5 P11 C1 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P3 P11 C5 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P11 C5 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A real italian pizza is a type of pizza which must only have thin and crispy bases.
TString: P5 P11 C1 which must only P13 thin and C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P5 P11 C1 which only P13 and C6)) .)
Invalid TEDEI!

Input Text: A spicy pizza has a spiciness that is hot.
TString: C2 P10 C3 that P11 hot . 
Parse Tree: (start (lexpr C2) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C3)))) that (intersectionOf (soloCombo solo (soloCombo (solo P11))))))) .)
Invalid TEDEI!

Input Text: A spicy pizza has a spiciness that is hot.
TString: C2 P2 C3 that P11 hot . 
Parse Tree: (start (lexpr C2) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P2 (classCombo C3)))) that (intersectionOf (soloCombo solo (soloCombo (solo P11))))))) .)
Invalid TEDEI!

Input Text: A spicy pizza has a spiciness that is hot.
TString: P2 P10 C3 that P11 hot . 
Parse Tree: (start lexpr (rexpr (unionOf P2 P10 C3 that P11)) .)
Invalid TEDEI!

Input Text: A spicy pizza has a spiciness that is hot.
TString: P4 P10 C3 that P11 hot . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P10 C3 that P11)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P13 C5 that only P14 C6 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C5)))) that (intersectionOf (soloCombo (solo (allValuesFrom only P14 (classCombo C6 or (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:vegetarian-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= is {a}  n:any-pizza
	 SoloSomeContext:= is {a}  n:any-pizza
	 ComboSoloContext:= is {a}  n:any-pizza
	 ClassComboContext:= n:no-toppings
	 ClassComboContext:= n:vegetarian, n:toppings or n:no-toppings
	 UniversalContext:=v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 SoloAllContext:=v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 ComboSoloContext:=v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 IntersectionOf1Context:=v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 IntersectionOf1Context:= is {a}  n:any-pizza and v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 UnionOf1Context:= is {a}  n:any-pizza and v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 RexprContext:= is {a}  n:any-pizza and v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 StartContext:={Every, A} n:vegetarian-pizza is {a}  n:any-pizza and v:has nothing but  n:vegetarian, n:toppings or n:no-toppings.
SynTrans Text: {Every, A} n:vegetarian-pizza is {a}  n:any-pizza and v:has nothing but  n:vegetarian, n:toppings or n:no-toppings.

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P4 C5 that only P14 C6 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C5)))) that (intersectionOf (soloCombo (solo (allValuesFrom only P14 (classCombo C6 or (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:vegetarian-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:any-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:any-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:any-pizza
	 ClassComboContext:= n:no-toppings
	 ClassComboContext:= n:vegetarian, n:toppings or n:no-toppings
	 UniversalContext:=v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 SoloAllContext:=v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 ComboSoloContext:=v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 IntersectionOf1Context:=v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 IntersectionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 UnionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 RexprContext:= v:pizza-is {a}  n:any-pizza and v:has nothing but  n:vegetarian, n:toppings or n:no-toppings
	 StartContext:={Every, A} n:vegetarian-pizza v:pizza-is {a}  n:any-pizza and v:has nothing but  n:vegetarian, n:toppings or n:no-toppings.
SynTrans Text: {Every, A} n:vegetarian-pizza v:pizza-is {a}  n:any-pizza and v:has nothing but  n:vegetarian, n:toppings or n:no-toppings.

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P4 P13 C5 that only P14 C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 C5 that only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P6 P13 C5 that only P14 C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 C5 that only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P4 P12 C5 that only P14 C6 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P12 C5 that only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P4 P12 C5 that only P14 C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P12 C5 that only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P6 P12 C5 that only P14 C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P12 C5 that only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P13 P3 only P14 C6 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P13 P3 only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P4 P3 only P14 C6 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P3 only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P4 P13 P3 only P14 C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 P3 only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P6 P13 P3 only P14 C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 P3 only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P4 P3 only P14 C6 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P3 only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P4 P12 only P14 C6 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P12 only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P4 P3 only P14 C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P3 only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P6 P12 only P14 C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P12 only P14 C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P13 C5 that only has C6 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C5)))) that (intersectionOf (soloCombo (solo (allValuesFrom only <missing PROPERTY> (classCombo C6 or (classCombo C7))))))))) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P4 C5 that only P0 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C5)))) that (intersectionOf (soloCombo (solo (allValuesFrom only P0 (classCombo or C7)))))))) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P4 P13 C5 that only has C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 C5 that only C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P6 P13 C5 that only P0 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 C5 that only P0 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P4 P12 C5 that only has C6 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P12 C5 that only C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P4 P12 C5 that only P0 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P12 C5 that only P0 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P4 P12 C5 that only has C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P12 C5 that only C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P6 P12 C5 that only P0 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P12 C5 that only P0 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P13 P3 only has C6 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P13 P3 only C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P4 P3 only P0 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P3 only P0 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P4 P13 P3 only has C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P13 P3 only C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P6 P13 P3 only P0 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P13 P3 only P0 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P4 P3 only has C6 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P3 only C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: C4 P4 P12 only P0 or C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P12 only P0 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P4 P3 only has C6 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P3 only C6 or C7)) .)
Invalid TEDEI!

Input Text: A vegetarian pizza is any pizza that only has vegetarian toppings or no toppings.
TString: P6 P12 only P0 or C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P12 only P0 or C7)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P15 C4 that P10 at least N0 P11 of C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) that (intersectionOf (soloCombo (solo (minCardinality P10 at least N0)) (soloCombo (solo (someValuesFrom P11 (classCombo C6))))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= is {a}  n:any-pizza
	 SoloSomeContext:= is {a}  n:any-pizza
	 ComboSoloContext:= is {a}  n:any-pizza
	 MinContext:=v:has at least 1 n:Thing
	 SoloMinContext:=v:has at least 1 n:Thing
	 ClassComboContext:= n:meat
	 SomeValuesFrom2Context:= v:topping {a}  n:meat
	 SoloSomeContext:= v:topping {a}  n:meat
	 ComboSoloContext:= v:topping {a}  n:meat
	 ComboSoloContext:=v:has at least 1 n:Thing and  v:topping {a}  n:meat
	 IntersectionOf1Context:=v:has at least 1 n:Thing and  v:topping {a}  n:meat
	 IntersectionOf1Context:= is {a}  n:any-pizza and v:has at least 1 n:Thing and  v:topping {a}  n:meat
	 UnionOf1Context:= is {a}  n:any-pizza and v:has at least 1 n:Thing and  v:topping {a}  n:meat
	 RexprContext:= is {a}  n:any-pizza and v:has at least 1 n:Thing and  v:topping {a}  n:meat
	 StartContext:={Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has at least 1 n:Thing and  v:topping {a}  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has at least 1 n:Thing and  v:topping {a}  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P3 C4 that P10 at least N0 P11 of C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C4)))) that (intersectionOf (soloCombo (solo (minCardinality P10 at least N0)) (soloCombo (solo (someValuesFrom P11 (classCombo C6))))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:any-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:any-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:any-pizza
	 MinContext:=v:has at least 1 n:Thing
	 SoloMinContext:=v:has at least 1 n:Thing
	 ClassComboContext:= n:meat
	 SomeValuesFrom2Context:= v:topping {a}  n:meat
	 SoloSomeContext:= v:topping {a}  n:meat
	 ComboSoloContext:= v:topping {a}  n:meat
	 ComboSoloContext:=v:has at least 1 n:Thing and  v:topping {a}  n:meat
	 IntersectionOf1Context:=v:has at least 1 n:Thing and  v:topping {a}  n:meat
	 IntersectionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:Thing and  v:topping {a}  n:meat
	 UnionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:Thing and  v:topping {a}  n:meat
	 RexprContext:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:Thing and  v:topping {a}  n:meat
	 StartContext:={Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has at least 1 n:Thing and  v:topping {a}  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has at least 1 n:Thing and  v:topping {a}  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P3 P15 C4 that P10 at least N0 P11 of C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P15 C4 that P10 at least N0 P11 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P6 P15 C4 that P10 at least N0 P11 of C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P15 C4 that P10 at least N0 P11 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P15 C4 that P16 least N0 P11 of C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) that (intersectionOf (soloCombo (solo (minCardinality P16 least N0)) (soloCombo (solo (someValuesFrom P11 (classCombo C6))))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= is {a}  n:any-pizza
	 SoloSomeContext:= is {a}  n:any-pizza
	 ComboSoloContext:= is {a}  n:any-pizza
	 MinContext:=v:has-at at least 1 n:Thing
	 SoloMinContext:=v:has-at at least 1 n:Thing
	 ClassComboContext:= n:meat
	 SomeValuesFrom2Context:= v:topping {a}  n:meat
	 SoloSomeContext:= v:topping {a}  n:meat
	 ComboSoloContext:= v:topping {a}  n:meat
	 ComboSoloContext:=v:has-at at least 1 n:Thing and  v:topping {a}  n:meat
	 IntersectionOf1Context:=v:has-at at least 1 n:Thing and  v:topping {a}  n:meat
	 IntersectionOf1Context:= is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping {a}  n:meat
	 UnionOf1Context:= is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping {a}  n:meat
	 RexprContext:= is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping {a}  n:meat
	 StartContext:={Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping {a}  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping {a}  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P3 C4 that P16 least N0 P11 of C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C4)))) that (intersectionOf (soloCombo (solo (minCardinality P16 least N0)) (soloCombo (solo (someValuesFrom P11 (classCombo C6))))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:any-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:any-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:any-pizza
	 MinContext:=v:has-at at least 1 n:Thing
	 SoloMinContext:=v:has-at at least 1 n:Thing
	 ClassComboContext:= n:meat
	 SomeValuesFrom2Context:= v:topping {a}  n:meat
	 SoloSomeContext:= v:topping {a}  n:meat
	 ComboSoloContext:= v:topping {a}  n:meat
	 ComboSoloContext:=v:has-at at least 1 n:Thing and  v:topping {a}  n:meat
	 IntersectionOf1Context:=v:has-at at least 1 n:Thing and  v:topping {a}  n:meat
	 IntersectionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping {a}  n:meat
	 UnionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping {a}  n:meat
	 RexprContext:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping {a}  n:meat
	 StartContext:={Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping {a}  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping {a}  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P3 P15 C4 that P16 least N0 P11 of C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P15 C4 that P16 least N0 P11 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P6 P15 C4 that P16 least N0 P11 of C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P15 C4 that P16 least N0 P11 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P15 C4 that P10 at least N0 C5 of C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P10 at least N0 (classCombo C5))) (soloCombo (solo (classCombo C6)))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= is {a}  n:any-pizza
	 SoloSomeContext:= is {a}  n:any-pizza
	 ComboSoloContext:= is {a}  n:any-pizza
	 ClassComboContext:= n:topping
	 QualifiedMinContext:=v:has at least 1 n:topping
	 SoloQualMinContext:=v:has at least 1 n:topping
	 ClassComboContext:= n:meat
	 SoloClsContext:= n:meat
	 ComboSoloContext:= n:meat
	 ComboSoloContext:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:= is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 UnionOf1Context:= is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 RexprContext:= is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 StartContext:={Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P3 C4 that P10 at least N0 C5 of C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P10 at least N0 (classCombo C5))) (soloCombo (solo (classCombo C6)))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:any-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:any-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:any-pizza
	 ClassComboContext:= n:topping
	 QualifiedMinContext:=v:has at least 1 n:topping
	 SoloQualMinContext:=v:has at least 1 n:topping
	 ClassComboContext:= n:meat
	 SoloClsContext:= n:meat
	 ComboSoloContext:= n:meat
	 ComboSoloContext:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 UnionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 RexprContext:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 StartContext:={Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P15 C4 that P10 at least N0 C5 of C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P10 at least N0 (classCombo C5))) (soloCombo (solo (classCombo C6)))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= is {a}  n:any-pizza
	 SoloSomeContext:= is {a}  n:any-pizza
	 ComboSoloContext:= is {a}  n:any-pizza
	 ClassComboContext:= n:topping
	 QualifiedMinContext:=v:has at least 1 n:topping
	 SoloQualMinContext:=v:has at least 1 n:topping
	 ClassComboContext:= n:meat
	 SoloClsContext:= n:meat
	 ComboSoloContext:= n:meat
	 ComboSoloContext:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:= is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 UnionOf1Context:= is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 RexprContext:= is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 StartContext:={Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P3 C4 that P10 at least N0 C5 of C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P10 at least N0 (classCombo C5))) (soloCombo (solo (classCombo C6)))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:any-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:any-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:any-pizza
	 ClassComboContext:= n:topping
	 QualifiedMinContext:=v:has at least 1 n:topping
	 SoloQualMinContext:=v:has at least 1 n:topping
	 ClassComboContext:= n:meat
	 SoloClsContext:= n:meat
	 ComboSoloContext:= n:meat
	 ComboSoloContext:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 UnionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 RexprContext:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 StartContext:={Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P15 C4 that P10 at least N0 C5 of C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P10 at least N0 (classCombo C5))) (soloCombo (solo (classCombo C6)))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= is {a}  n:any-pizza
	 SoloSomeContext:= is {a}  n:any-pizza
	 ComboSoloContext:= is {a}  n:any-pizza
	 ClassComboContext:= n:topping
	 QualifiedMinContext:=v:has at least 1 n:topping
	 SoloQualMinContext:=v:has at least 1 n:topping
	 ClassComboContext:= n:meat
	 SoloClsContext:= n:meat
	 ComboSoloContext:= n:meat
	 ComboSoloContext:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:= is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 UnionOf1Context:= is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 RexprContext:= is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 StartContext:={Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P3 C4 that P10 at least N0 C5 of C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P10 at least N0 (classCombo C5))) (soloCombo (solo (classCombo C6)))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:any-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:any-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:any-pizza
	 ClassComboContext:= n:topping
	 QualifiedMinContext:=v:has at least 1 n:topping
	 SoloQualMinContext:=v:has at least 1 n:topping
	 ClassComboContext:= n:meat
	 SoloClsContext:= n:meat
	 ComboSoloContext:= n:meat
	 ComboSoloContext:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:=v:has at least 1 n:topping and  n:meat
	 IntersectionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 UnionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 RexprContext:= v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat
	 StartContext:={Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has at least 1 n:topping and  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P3 P15 C4 that P10 at least N0 C5 of C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P15 C4 that P10 at least N0 C5 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P6 P15 C4 that P10 at least N0 C5 of C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P15 C4 that P10 at least N0 C5 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P3 P15 C4 that P10 at least N0 P17 C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P15 C4 that P10 at least N0 P17 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P6 P15 C4 that P10 at least N0 P17 C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P15 C4 that P10 at least N0 P17 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P3 P15 C4 that P10 at least N0 P17 C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P15 C4 that P10 at least N0 P17 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P6 P15 C4 that P10 at least N0 P17 C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P15 C4 that P10 at least N0 P17 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P15 C4 that P16 least N0 P17 C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) that (intersectionOf (soloCombo (solo (minCardinality P16 least N0)) (soloCombo (solo (someValuesFrom P17 (classCombo C6))))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= is {a}  n:any-pizza
	 SoloSomeContext:= is {a}  n:any-pizza
	 ComboSoloContext:= is {a}  n:any-pizza
	 MinContext:=v:has-at at least 1 n:Thing
	 SoloMinContext:=v:has-at at least 1 n:Thing
	 ClassComboContext:= n:meat
	 SomeValuesFrom2Context:= v:topping-of {a}  n:meat
	 SoloSomeContext:= v:topping-of {a}  n:meat
	 ComboSoloContext:= v:topping-of {a}  n:meat
	 ComboSoloContext:=v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 IntersectionOf1Context:=v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 IntersectionOf1Context:= is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 UnionOf1Context:= is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 RexprContext:= is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 StartContext:={Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P3 C4 that P16 least N0 P17 C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C4)))) that (intersectionOf (soloCombo (solo (minCardinality P16 least N0)) (soloCombo (solo (someValuesFrom P17 (classCombo C6))))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:any-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:any-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:any-pizza
	 MinContext:=v:has-at at least 1 n:Thing
	 SoloMinContext:=v:has-at at least 1 n:Thing
	 ClassComboContext:= n:meat
	 SomeValuesFrom2Context:= v:topping-of {a}  n:meat
	 SoloSomeContext:= v:topping-of {a}  n:meat
	 ComboSoloContext:= v:topping-of {a}  n:meat
	 ComboSoloContext:=v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 IntersectionOf1Context:=v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 IntersectionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 UnionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 RexprContext:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 StartContext:={Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P15 C4 that P16 least N0 P17 C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) that (intersectionOf (soloCombo (solo (minCardinality P16 least N0)) (soloCombo (solo (someValuesFrom P17 (classCombo C6))))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= is {a}  n:any-pizza
	 SoloSomeContext:= is {a}  n:any-pizza
	 ComboSoloContext:= is {a}  n:any-pizza
	 MinContext:=v:has-at at least 1 n:Thing
	 SoloMinContext:=v:has-at at least 1 n:Thing
	 ClassComboContext:= n:meat
	 SomeValuesFrom2Context:= v:topping-of {a}  n:meat
	 SoloSomeContext:= v:topping-of {a}  n:meat
	 ComboSoloContext:= v:topping-of {a}  n:meat
	 ComboSoloContext:=v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 IntersectionOf1Context:=v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 IntersectionOf1Context:= is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 UnionOf1Context:= is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 RexprContext:= is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 StartContext:={Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P3 C4 that P16 least N0 P17 C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C4)))) that (intersectionOf (soloCombo (solo (minCardinality P16 least N0)) (soloCombo (solo (someValuesFrom P17 (classCombo C6))))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:any-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:any-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:any-pizza
	 MinContext:=v:has-at at least 1 n:Thing
	 SoloMinContext:=v:has-at at least 1 n:Thing
	 ClassComboContext:= n:meat
	 SomeValuesFrom2Context:= v:topping-of {a}  n:meat
	 SoloSomeContext:= v:topping-of {a}  n:meat
	 ComboSoloContext:= v:topping-of {a}  n:meat
	 ComboSoloContext:=v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 IntersectionOf1Context:=v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 IntersectionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 UnionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 RexprContext:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat
	 StartContext:={Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat.
SynTrans Text: {Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:Thing and  v:topping-of {a}  n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P15 C4 that P16 least N0 topping of C6 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P16 least N0 (classCombo C6)))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= is {a}  n:any-pizza
	 SoloSomeContext:= is {a}  n:any-pizza
	 ComboSoloContext:= is {a}  n:any-pizza
	 ClassComboContext:= n:meat
	 QualifiedMinContext:=v:has-at at least 1 n:meat
	 SoloQualMinContext:=v:has-at at least 1 n:meat
	 ComboSoloContext:=v:has-at at least 1 n:meat
	 IntersectionOf1Context:=v:has-at at least 1 n:meat
	 IntersectionOf1Context:= is {a}  n:any-pizza and v:has-at at least 1 n:meat
	 UnionOf1Context:= is {a}  n:any-pizza and v:has-at at least 1 n:meat
	 RexprContext:= is {a}  n:any-pizza and v:has-at at least 1 n:meat
	 StartContext:={Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has-at at least 1 n:meat.
SynTrans Text: {Every, A} n:meaty-pizza is {a}  n:any-pizza and v:has-at at least 1 n:meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: C3 P3 C4 that P16 least N0 C2 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C4)))) that (intersectionOf (soloCombo (solo (qualifiedMinCardinality P16 least N0 (classCombo C2)))))))) .)
	 Lexpr1Context:={Every, A} n:meaty-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:any-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:any-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:any-pizza
	 ClassComboContext:= n:topping-of-meat
	 QualifiedMinContext:=v:has-at at least 1 n:topping-of-meat
	 SoloQualMinContext:=v:has-at at least 1 n:topping-of-meat
	 ComboSoloContext:=v:has-at at least 1 n:topping-of-meat
	 IntersectionOf1Context:=v:has-at at least 1 n:topping-of-meat
	 IntersectionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:topping-of-meat
	 UnionOf1Context:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:topping-of-meat
	 RexprContext:= v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:topping-of-meat
	 StartContext:={Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:topping-of-meat.
SynTrans Text: {Every, A} n:meaty-pizza v:pizza-is {a}  n:any-pizza and v:has-at at least 1 n:topping-of-meat.

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P3 P15 C4 that P16 least N0 topping of C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P15 C4 that P16 least N0 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P6 P15 C4 that P16 least N0 C2 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P15 C4 that P16 least N0 C2)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P3 P15 C4 that P16 least N0 topping of C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P15 C4 that P16 least N0 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P6 P15 C4 that P16 least N0 C2 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P15 C4 that P16 least N0 C2)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P3 P15 C4 that P16 least N0 topping of C6 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P15 C4 that P16 least N0 C6)) .)
Invalid TEDEI!

Input Text: A meaty pizza is any pizza that has at least 1 topping of meat.
TString: P6 P15 C4 that P16 least N0 C2 . 
Parse Tree: (start lexpr (rexpr (unionOf P6 P15 C4 that P16 least N0 C2)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 C5 of C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= is {a}  n:a-sort
	 SoloSomeContext:= is {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= is {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has {a}  n:additional and v:has {a}  n:toppings
	 SoloSomeContext:= v:has {a}  n:additional and v:has {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= is {a}  n:a-sort and  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 C5 of C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 C5 of C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P7 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C5 of C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has {a}  n:additional and v:has {a}  n:toppings
	 SoloSomeContext:= v:has {a}  n:additional and v:has {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C5 of C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C5 C6 which P16 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P16 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P16 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P16 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P16 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P16 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P16 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has {a}  n:additional and v:has {a}  n:toppings
	 SoloSomeContext:= v:has {a}  n:additional and v:has {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P16 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort-of-margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has {a}  n:additional and v:has {a}  n:toppings
	 SoloSomeContext:= v:has {a}  n:additional and v:has {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has {a}  n:additional and v:has {a}  n:toppings
	 SoloSomeContext:= v:has {a}  n:additional and v:has {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P16 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort-of-margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has {a}  n:additional and v:has {a}  n:toppings
	 SoloSomeContext:= v:has {a}  n:additional and v:has {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has {a}  n:additional and v:has {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P16 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P16 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P16 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P16 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P16 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P16 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P16 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 C5 of C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= is {a}  n:a-sort
	 SoloSomeContext:= is {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= is {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 C5 of C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 C5 of C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P7 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C5 of C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C5 of C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C5 C6 which P14 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P14 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P14 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P14 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P14 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P14 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P14 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P14 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort-of-margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P14 C7 of C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C7))) (soloCombo (solo (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort-of-margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ClassComboContext:= n:additional, n:toppings
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SoloClsContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= n:olives and n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional and v:has-additional-toppings-of {a}  n:toppings and  n:olives and n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P14 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P14 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P14 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P14 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P14 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P14 C7 of C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P14 C7 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 C5 of C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 C5 of C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 C5 of C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 C5 of C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P7 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 C5 of C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 C5 of C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P7 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C5 of C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C5 of C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C5 of C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C5 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C5 of C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C5 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P16 P4 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P4 (classCombo C8 and (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P16 P4 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P16 P4 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 C5 of C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= is {a}  n:a-sort
	 SoloSomeContext:= is {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= is {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 C5 of C6 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C2 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= is {a}  n:a-sort
	 SoloSomeContext:= is {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= is {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:additional-toppings-of-olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 C5 of C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= is {a}  n:a-sort
	 SoloSomeContext:= is {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= is {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 C5 of C6 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C2 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= is {a}  n:a-sort
	 SoloSomeContext:= is {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= is {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:additional-toppings-of-olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza is {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 C5 of C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C8 and (classCombo C9))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 C5 of C6 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P7 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C2 and (classCombo C9))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 C5 of C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C8 and (classCombo C9))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 C5 of C6 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P7 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C2 and (classCombo C9))))))))) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C5 of C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C5 of C6 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C2 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:additional-toppings-of-olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C5 of C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C5 of C6 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C5))) (soloCombo (solo (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C2 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort
	 ClassComboContext:= n:margherita-pizza
	 SoloClsContext:= n:margherita-pizza
	 ComboSoloContext:= n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:additional-toppings-of-olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort and  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C5 of C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C5 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C5 of C6 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C5 C6 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C5 of C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C5 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C5 of C6 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C5 C6 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P15 P3 C6 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P15 P3 C6 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P15 P3 C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P15 P3 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P3 C6 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P3 C6 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C2 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort-of-margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:additional-toppings-of-olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C2 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort-of-margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:additional-toppings-of-olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C2 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort-of-margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:additional-toppings-of-olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C6 which P14 C8 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C8 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:margherita-pizza and  v:has-additional-toppings-of {a}  n:olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: C4 P13 C1 which P14 C2 and C9 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C1)))) which (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C2 and (classCombo C9))))))))) .)
	 Lexpr1Context:={Every, A} n:soho-pizza
	 ClassComboContext:= n:a-sort-of-margherita-pizza
	 SomeValuesFrom2Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 SoloSomeContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ComboSoloContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza
	 ClassComboContext:= n:parmesan-cheese
	 ClassComboContext:= n:additional-toppings-of-olives and n:parmesan-cheese
	 SomeValuesFrom2Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 SoloSomeContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 ComboSoloContext:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 IntersectionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 UnionOf1Context:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 RexprContext:= v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese
	 StartContext:={Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.
SynTrans Text: {Every, A} n:soho-pizza v:is-a-sort-of {a}  n:a-sort-of-margherita-pizza and  v:has-additional-toppings-of {a}  n:additional-toppings-of-olives  and v:has-additional-toppings-of {a}  n:parmesan-cheese.

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C6 which P14 C8 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C6 which P14 C8 and C9)) .)
Invalid TEDEI!

Input Text: A soho pizza is a sort of margherita pizza which has additional toppings of olives and parmesan cheese.
TString: P7 P13 C1 which P14 C2 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P7 P13 C1 which P14 C2 and C9)) .)
Invalid TEDEI!

Input Text: A non vegetarian pizza is any pizza that is not a vegetarian pizza.
TString: C3 P10 C4 that P11 not C5 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C4)))) that (intersectionOf (soloCombo (solo (complementOf P11 not (classCombo C5)))))))) .)
	 Lexpr1Context:={Every, A} n:non-vegetarian-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= is {a}  n:any-pizza
	 SoloSomeContext:= is {a}  n:any-pizza
	 ComboSoloContext:= is {a}  n:any-pizza
	 ClassComboContext:= n:vegetarian, n:a-pizza
	 Comp2Context:=is no  n:vegetarian, n:a-pizza
	 SoloCompContext:=is no  n:vegetarian, n:a-pizza
	 ComboSoloContext:=is no  n:vegetarian, n:a-pizza
	 IntersectionOf1Context:=is no  n:vegetarian, n:a-pizza
	 IntersectionOf1Context:= is {a}  n:any-pizza and is no  n:vegetarian, n:a-pizza
	 UnionOf1Context:= is {a}  n:any-pizza and is no  n:vegetarian, n:a-pizza
	 RexprContext:= is {a}  n:any-pizza and is no  n:vegetarian, n:a-pizza
	 StartContext:={Every, A} n:non-vegetarian-pizza is {a}  n:any-pizza and is no  n:vegetarian, n:a-pizza.
SynTrans Text: {Every, A} n:non-vegetarian-pizza is {a}  n:any-pizza and is no  n:vegetarian, n:a-pizza.

Input Text: A non vegetarian pizza is any pizza that is not a vegetarian pizza.
TString: C3 P2 C4 that P11 not C5 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P2 (classCombo C4)))) that (intersectionOf (soloCombo (solo (complementOf P11 not (classCombo C5)))))))) .)
	 Lexpr1Context:={Every, A} n:non-vegetarian-pizza
	 ClassComboContext:= n:any-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:any-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:any-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:any-pizza
	 ClassComboContext:= n:vegetarian, n:a-pizza
	 Comp2Context:=is no  n:vegetarian, n:a-pizza
	 SoloCompContext:=is no  n:vegetarian, n:a-pizza
	 ComboSoloContext:=is no  n:vegetarian, n:a-pizza
	 IntersectionOf1Context:=is no  n:vegetarian, n:a-pizza
	 IntersectionOf1Context:= v:pizza-is {a}  n:any-pizza and is no  n:vegetarian, n:a-pizza
	 UnionOf1Context:= v:pizza-is {a}  n:any-pizza and is no  n:vegetarian, n:a-pizza
	 RexprContext:= v:pizza-is {a}  n:any-pizza and is no  n:vegetarian, n:a-pizza
	 StartContext:={Every, A} n:non-vegetarian-pizza v:pizza-is {a}  n:any-pizza and is no  n:vegetarian, n:a-pizza.
SynTrans Text: {Every, A} n:non-vegetarian-pizza v:pizza-is {a}  n:any-pizza and is no  n:vegetarian, n:a-pizza.

Input Text: A non vegetarian pizza is any pizza that is not a vegetarian pizza.
TString: P2 P10 C4 that P11 not C5 . 
Parse Tree: (start lexpr (rexpr (unionOf P2 P10 C4 that P11 not C5)) .)
Invalid TEDEI!

Input Text: A non vegetarian pizza is any pizza that is not a vegetarian pizza.
TString: P4 P10 C4 that P11 not C5 . 
Parse Tree: (start lexpr (rexpr (unionOf P4 P10 C4 that P11 not C5)) .)
Invalid TEDEI!

Input Text: The Sicilian pizza is a pizza that is originated in Italy.
TString: C2 P10 C3 that P11 in I1 . 
Parse Tree: (start (lexpr C2) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C3)))) that (intersectionOf (soloCombo (solo (hasValue P11 I1))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 HasValueContext:=v:is-originated p:Italy
	 SoloValContext:=v:is-originated p:Italy
	 ComboSoloContext:=v:is-originated p:Italy
	 IntersectionOf1Context:=v:is-originated p:Italy
	 IntersectionOf1Context:= is {a}  n:a-pizza and v:is-originated p:Italy
	 UnionOf1Context:= is {a}  n:a-pizza and v:is-originated p:Italy
	 RexprContext:= is {a}  n:a-pizza and v:is-originated p:Italy
	 StartContext:={Every, A} n:pizza is {a}  n:a-pizza and v:is-originated p:Italy.
SynTrans Text: {Every, A} n:pizza is {a}  n:a-pizza and v:is-originated p:Italy.

Input Text: The Sicilian pizza is a pizza that is originated in Italy.
TString: I0 P10 C3 that P11 in I1 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C3)))) that (intersectionOf (soloCombo (solo (hasValue P11 I1))))))) .)
	 Lexpr2Context:={Every, A} n:Sicilian-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 HasValueContext:=v:is-originated p:Italy
	 SoloValContext:=v:is-originated p:Italy
	 ComboSoloContext:=v:is-originated p:Italy
	 IntersectionOf1Context:=v:is-originated p:Italy
	 IntersectionOf1Context:= is {a}  n:a-pizza and v:is-originated p:Italy
	 UnionOf1Context:= is {a}  n:a-pizza and v:is-originated p:Italy
	 RexprContext:= is {a}  n:a-pizza and v:is-originated p:Italy
	 StartContext:={Every, A} n:Sicilian-pizza is {a}  n:a-pizza and v:is-originated p:Italy.
SynTrans Text: {Every, A} n:Sicilian-pizza is {a}  n:a-pizza and v:is-originated p:Italy.

Input Text: The Sicilian pizza is a pizza that is originated in Italy.
TString: I0 P10 C3 that P11 in I1 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C3)))) that (intersectionOf (soloCombo (solo (hasValue P11 I1))))))) .)
	 Lexpr2Context:={Every, A} n:Sicilian-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 HasValueContext:=v:is-originated p:Italy
	 SoloValContext:=v:is-originated p:Italy
	 ComboSoloContext:=v:is-originated p:Italy
	 IntersectionOf1Context:=v:is-originated p:Italy
	 IntersectionOf1Context:= is {a}  n:a-pizza and v:is-originated p:Italy
	 UnionOf1Context:= is {a}  n:a-pizza and v:is-originated p:Italy
	 RexprContext:= is {a}  n:a-pizza and v:is-originated p:Italy
	 StartContext:={Every, A} n:Sicilian-pizza is {a}  n:a-pizza and v:is-originated p:Italy.
SynTrans Text: {Every, A} n:Sicilian-pizza is {a}  n:a-pizza and v:is-originated p:Italy.

Input Text: The Sicilian pizza is a pizza that is originated in Italy.
TString: I0 P4 C3 that P11 in I1 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C3)))) that (intersectionOf (soloCombo (solo (hasValue P11 I1))))))) .)
	 Lexpr2Context:={Every, A} n:Sicilian-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza
	 HasValueContext:=v:is-originated p:Italy
	 SoloValContext:=v:is-originated p:Italy
	 ComboSoloContext:=v:is-originated p:Italy
	 IntersectionOf1Context:=v:is-originated p:Italy
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and v:is-originated p:Italy
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and v:is-originated p:Italy
	 RexprContext:= v:pizza-is {a}  n:a-pizza and v:is-originated p:Italy
	 StartContext:={Every, A} n:Sicilian-pizza v:pizza-is {a}  n:a-pizza and v:is-originated p:Italy.
SynTrans Text: {Every, A} n:Sicilian-pizza v:pizza-is {a}  n:a-pizza and v:is-originated p:Italy.

Input Text: The Sicilian pizza is a pizza that is originated in Italy.
TString: C2 P10 C3 that P3 I1 . 
Parse Tree: (start (lexpr C2) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C3)))) that (intersectionOf (soloCombo (solo (hasValue P3 I1))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 HasValueContext:=v:is-originated-in p:Italy
	 SoloValContext:=v:is-originated-in p:Italy
	 ComboSoloContext:=v:is-originated-in p:Italy
	 IntersectionOf1Context:=v:is-originated-in p:Italy
	 IntersectionOf1Context:= is {a}  n:a-pizza and v:is-originated-in p:Italy
	 UnionOf1Context:= is {a}  n:a-pizza and v:is-originated-in p:Italy
	 RexprContext:= is {a}  n:a-pizza and v:is-originated-in p:Italy
	 StartContext:={Every, A} n:pizza is {a}  n:a-pizza and v:is-originated-in p:Italy.
SynTrans Text: {Every, A} n:pizza is {a}  n:a-pizza and v:is-originated-in p:Italy.

Input Text: The Sicilian pizza is a pizza that is originated in Italy.
TString: I0 P10 C3 that P3 I1 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C3)))) that (intersectionOf (soloCombo (solo (hasValue P3 I1))))))) .)
	 Lexpr2Context:={Every, A} n:Sicilian-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 HasValueContext:=v:is-originated-in p:Italy
	 SoloValContext:=v:is-originated-in p:Italy
	 ComboSoloContext:=v:is-originated-in p:Italy
	 IntersectionOf1Context:=v:is-originated-in p:Italy
	 IntersectionOf1Context:= is {a}  n:a-pizza and v:is-originated-in p:Italy
	 UnionOf1Context:= is {a}  n:a-pizza and v:is-originated-in p:Italy
	 RexprContext:= is {a}  n:a-pizza and v:is-originated-in p:Italy
	 StartContext:={Every, A} n:Sicilian-pizza is {a}  n:a-pizza and v:is-originated-in p:Italy.
SynTrans Text: {Every, A} n:Sicilian-pizza is {a}  n:a-pizza and v:is-originated-in p:Italy.

Input Text: The Sicilian pizza is a pizza that is originated in Italy.
TString: I0 P10 C3 that P3 I1 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C3)))) that (intersectionOf (soloCombo (solo (hasValue P3 I1))))))) .)
	 Lexpr2Context:={Every, A} n:Sicilian-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 HasValueContext:=v:is-originated-in p:Italy
	 SoloValContext:=v:is-originated-in p:Italy
	 ComboSoloContext:=v:is-originated-in p:Italy
	 IntersectionOf1Context:=v:is-originated-in p:Italy
	 IntersectionOf1Context:= is {a}  n:a-pizza and v:is-originated-in p:Italy
	 UnionOf1Context:= is {a}  n:a-pizza and v:is-originated-in p:Italy
	 RexprContext:= is {a}  n:a-pizza and v:is-originated-in p:Italy
	 StartContext:={Every, A} n:Sicilian-pizza is {a}  n:a-pizza and v:is-originated-in p:Italy.
SynTrans Text: {Every, A} n:Sicilian-pizza is {a}  n:a-pizza and v:is-originated-in p:Italy.

Input Text: The Sicilian pizza is a pizza that is originated in Italy.
TString: I0 P4 C3 that P3 I1 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C3)))) that (intersectionOf (soloCombo (solo (hasValue P3 I1))))))) .)
	 Lexpr2Context:={Every, A} n:Sicilian-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza
	 HasValueContext:=v:is-originated-in p:Italy
	 SoloValContext:=v:is-originated-in p:Italy
	 ComboSoloContext:=v:is-originated-in p:Italy
	 IntersectionOf1Context:=v:is-originated-in p:Italy
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and v:is-originated-in p:Italy
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and v:is-originated-in p:Italy
	 RexprContext:= v:pizza-is {a}  n:a-pizza and v:is-originated-in p:Italy
	 StartContext:={Every, A} n:Sicilian-pizza v:pizza-is {a}  n:a-pizza and v:is-originated-in p:Italy.
SynTrans Text: {Every, A} n:Sicilian-pizza v:pizza-is {a}  n:a-pizza and v:is-originated-in p:Italy.

Input Text: Diavolo pizza is an interesting pizza which has hot spiced beef, pepperoni, mozzarella, tomato, green pepper, red onion and tabasco.
TString: C9 P11 C10 which P12 C11 , C12 , C13 , C14 , C15 , C16 and C8 . 
Parse Tree: (start (lexpr C9) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C10)))) which (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C11 , (classCombo C12 , (classCombo C13 , (classCombo C14 , (classCombo C15 , (classCombo C16 and (classCombo C8)))))))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:interesting, n:an-pizza
	 SomeValuesFrom2Context:= is {a}  n:interesting and is {a}  n:an-pizza
	 SoloSomeContext:= is {a}  n:interesting and is {a}  n:an-pizza
	 ComboSoloContext:= is {a}  n:interesting and is {a}  n:an-pizza
	 ClassComboContext:= n:tabasco
	 ClassComboContext:= n:red, n:onion and n:tabasco
	 ClassComboContext:= n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 SomeValuesFrom2Context:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 SoloSomeContext:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 ComboSoloContext:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 IntersectionOf1Context:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 IntersectionOf1Context:= is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 UnionOf1Context:= is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 RexprContext:= is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 StartContext:={Every, A} n:pizza is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco.
SynTrans Text: {Every, A} n:pizza is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco.

Input Text: Diavolo pizza is an interesting pizza which has hot spiced beef, pepperoni, mozzarella, tomato, green pepper, red onion and tabasco.
TString: I0 P11 C10 which P12 C11 , C12 , C13 , C14 , C15 , C16 and C8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C10)))) which (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C11 , (classCombo C12 , (classCombo C13 , (classCombo C14 , (classCombo C15 , (classCombo C16 and (classCombo C8)))))))))))))) .)
	 Lexpr2Context:={Every, A} n:Diavolo-pizza
	 ClassComboContext:= n:interesting, n:an-pizza
	 SomeValuesFrom2Context:= is {a}  n:interesting and is {a}  n:an-pizza
	 SoloSomeContext:= is {a}  n:interesting and is {a}  n:an-pizza
	 ComboSoloContext:= is {a}  n:interesting and is {a}  n:an-pizza
	 ClassComboContext:= n:tabasco
	 ClassComboContext:= n:red, n:onion and n:tabasco
	 ClassComboContext:= n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 SomeValuesFrom2Context:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 SoloSomeContext:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 ComboSoloContext:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 IntersectionOf1Context:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 IntersectionOf1Context:= is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 UnionOf1Context:= is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 RexprContext:= is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 StartContext:={Every, A} n:Diavolo-pizza is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco.
SynTrans Text: {Every, A} n:Diavolo-pizza is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco.

Input Text: Diavolo pizza is an interesting pizza which has hot spiced beef, pepperoni, mozzarella, tomato, green pepper, red onion and tabasco.
TString: I0 P11 C10 which P12 C11 , C12 , C13 , C14 , C15 , C16 and C8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C10)))) which (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C11 , (classCombo C12 , (classCombo C13 , (classCombo C14 , (classCombo C15 , (classCombo C16 and (classCombo C8)))))))))))))) .)
	 Lexpr2Context:={Every, A} n:Diavolo-pizza
	 ClassComboContext:= n:interesting, n:an-pizza
	 SomeValuesFrom2Context:= is {a}  n:interesting and is {a}  n:an-pizza
	 SoloSomeContext:= is {a}  n:interesting and is {a}  n:an-pizza
	 ComboSoloContext:= is {a}  n:interesting and is {a}  n:an-pizza
	 ClassComboContext:= n:tabasco
	 ClassComboContext:= n:red, n:onion and n:tabasco
	 ClassComboContext:= n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 SomeValuesFrom2Context:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 SoloSomeContext:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 ComboSoloContext:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 IntersectionOf1Context:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 IntersectionOf1Context:= is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 UnionOf1Context:= is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 RexprContext:= is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 StartContext:={Every, A} n:Diavolo-pizza is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco.
SynTrans Text: {Every, A} n:Diavolo-pizza is {a}  n:interesting and is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco.

Input Text: Diavolo pizza is an interesting pizza which has hot spiced beef, pepperoni, mozzarella, tomato, green pepper, red onion and tabasco.
TString: I0 P5 C10 which P12 C11 , C12 , C13 , C14 , C15 , C16 and C8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P5 (classCombo C10)))) which (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C11 , (classCombo C12 , (classCombo C13 , (classCombo C14 , (classCombo C15 , (classCombo C16 and (classCombo C8)))))))))))))) .)
	 Lexpr2Context:={Every, A} n:Diavolo-pizza
	 ClassComboContext:= n:interesting, n:an-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:interesting and v:pizza-is {a}  n:an-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:interesting and v:pizza-is {a}  n:an-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:interesting and v:pizza-is {a}  n:an-pizza
	 ClassComboContext:= n:tabasco
	 ClassComboContext:= n:red, n:onion and n:tabasco
	 ClassComboContext:= n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 SomeValuesFrom2Context:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 SoloSomeContext:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 ComboSoloContext:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 IntersectionOf1Context:= v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 IntersectionOf1Context:= v:pizza-is {a}  n:interesting and v:pizza-is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 UnionOf1Context:= v:pizza-is {a}  n:interesting and v:pizza-is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 RexprContext:= v:pizza-is {a}  n:interesting and v:pizza-is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco
	 StartContext:={Every, A} n:Diavolo-pizza v:pizza-is {a}  n:interesting and v:pizza-is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco.
SynTrans Text: {Every, A} n:Diavolo-pizza v:pizza-is {a}  n:interesting and v:pizza-is {a}  n:an-pizza and  v:has {a}  n:hot-spiced and v:has {a}  n:beef  and v:has {a}  n:pepperoni  and v:has {a}  n:mozzarella  and v:has {a}  n:tomato  and v:has {a}  n:green and v:has {a}  n:pepper  and v:has {a}  n:red and v:has {a}  n:onion  and v:has {a}  n:tabasco.

Input Text: Diavolo pizza is an interesting pizza which has hot spiced beef, pepperoni, mozzarella, tomato, green pepper, red onion and tabasco.
TString: C9 P11 C10 which has C11 , C12 , C13 , C14 , C15 , C16 and C8 . 
Parse Tree: (start (lexpr C9) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C10)))) which (intersectionOf (soloCombo (solo (classCombo C11 , (classCombo C12 , (classCombo C13 , (classCombo C14 , (classCombo C15 , (classCombo C16 and (classCombo C8))))))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:interesting, n:an-pizza
	 SomeValuesFrom2Context:= is {a}  n:interesting and is {a}  n:an-pizza
	 SoloSomeContext:= is {a}  n:interesting and is {a}  n:an-pizza
	 ComboSoloContext:= is {a}  n:interesting and is {a}  n:an-pizza
	 ClassComboContext:= n:tabasco
	 ClassComboContext:= n:red, n:onion and n:tabasco
	 ClassComboContext:= n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 SoloClsContext:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ComboSoloContext:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 IntersectionOf1Context:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 IntersectionOf1Context:= is {a}  n:interesting and is {a}  n:an-pizza and  n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 UnionOf1Context:= is {a}  n:interesting and is {a}  n:an-pizza and  n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 RexprContext:= is {a}  n:interesting and is {a}  n:an-pizza and  n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 StartContext:={Every, A} n:pizza is {a}  n:interesting and is {a}  n:an-pizza and  n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco.
SynTrans Text: {Every, A} n:pizza is {a}  n:interesting and is {a}  n:an-pizza and  n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco.

Input Text: Diavolo pizza is an interesting pizza which has hot spiced beef, pepperoni, mozzarella, tomato, green pepper, red onion and tabasco.
TString: I0 P11 C10 which P0 , C12 , C13 , C14 , C15 , C16 and C8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C10)))) which (intersectionOf (soloCombo solo (soloCombo (solo P0) , (soloCombo (solo (classCombo C12 , (classCombo C13 , (classCombo C14 , (classCombo C15 , (classCombo C16 and (classCombo C8)))))))))))))) .)
Invalid TEDEI!

Input Text: Diavolo pizza is an interesting pizza which has hot spiced beef, pepperoni, mozzarella, tomato, green pepper, red onion and tabasco.
TString: I0 P11 C10 which has C11 , C12 , C13 , C14 , C15 , C16 and C8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C10)))) which (intersectionOf (soloCombo (solo (classCombo C11 , (classCombo C12 , (classCombo C13 , (classCombo C14 , (classCombo C15 , (classCombo C16 and (classCombo C8))))))))))))) .)
	 Lexpr2Context:={Every, A} n:Diavolo-pizza
	 ClassComboContext:= n:interesting, n:an-pizza
	 SomeValuesFrom2Context:= is {a}  n:interesting and is {a}  n:an-pizza
	 SoloSomeContext:= is {a}  n:interesting and is {a}  n:an-pizza
	 ComboSoloContext:= is {a}  n:interesting and is {a}  n:an-pizza
	 ClassComboContext:= n:tabasco
	 ClassComboContext:= n:red, n:onion and n:tabasco
	 ClassComboContext:= n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ClassComboContext:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 SoloClsContext:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 ComboSoloContext:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 IntersectionOf1Context:= n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 IntersectionOf1Context:= is {a}  n:interesting and is {a}  n:an-pizza and  n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 UnionOf1Context:= is {a}  n:interesting and is {a}  n:an-pizza and  n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 RexprContext:= is {a}  n:interesting and is {a}  n:an-pizza and  n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco
	 StartContext:={Every, A} n:Diavolo-pizza is {a}  n:interesting and is {a}  n:an-pizza and  n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco.
SynTrans Text: {Every, A} n:Diavolo-pizza is {a}  n:interesting and is {a}  n:an-pizza and  n:hot-spiced, n:beef , n:pepperoni , n:mozzarella , n:tomato , n:green, n:pepper , n:red, n:onion and n:tabasco.

Input Text: Diavolo pizza is an interesting pizza which has hot spiced beef, pepperoni, mozzarella, tomato, green pepper, red onion and tabasco.
TString: I0 P5 C10 which P0 , C12 , C13 , C14 , C15 , C16 and C8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P5 (classCombo C10)))) which (intersectionOf (soloCombo solo (soloCombo (solo P0) , (soloCombo (solo (classCombo C12 , (classCombo C13 , (classCombo C14 , (classCombo C15 , (classCombo C16 and (classCombo C8)))))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of C6 P15 in C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P22 (classCombo C6))) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Forza-Pizza
	 ClassComboContext:= n:fiery, n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:fiery and is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ClassComboContext:= n:chicken
	 SomeValuesFrom2Context:= v:is-made {a}  n:chicken
	 SoloSomeContext:= v:is-made {a}  n:chicken
	 ClassComboContext:= n:garlic
	 ClassComboContext:= n:smoky, n:chilli-powder , n:garlic
	 SomeValuesFrom2Context:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic
	 SoloSomeContext:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic
	 ClassComboContext:= n:chilli-flakes
	 SomeValuesFrom2Context:= v:dried {a}  n:chilli-flakes
	 SoloSomeContext:= v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 IntersectionOf1Context:= v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 IntersectionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 UnionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 RexprContext:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 StartContext:={Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes.
SynTrans Text: {Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes.

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 C6 P15 in C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C6))) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Forza-Pizza
	 ClassComboContext:= n:fiery, n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:fiery and is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ClassComboContext:= n:chicken
	 SomeValuesFrom2Context:= v:is-made-of {a}  n:chicken
	 SoloSomeContext:= v:is-made-of {a}  n:chicken
	 ClassComboContext:= n:garlic
	 ClassComboContext:= n:smoky, n:chilli-powder , n:garlic
	 SomeValuesFrom2Context:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic
	 SoloSomeContext:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic
	 ClassComboContext:= n:chilli-flakes
	 SomeValuesFrom2Context:= v:dried {a}  n:chilli-flakes
	 SoloSomeContext:= v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 IntersectionOf1Context:= v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 IntersectionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 UnionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 RexprContext:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 StartContext:={Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes.
SynTrans Text: {Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic and  v:dried {a}  n:chilli-flakes.

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of chicken P15 in C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of P11 in C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22) (soloCombo (solo (someValuesFrom P11 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of chicken P15 in C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of P11 in C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22) (soloCombo (solo (someValuesFrom P11 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 P7 P15 in C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6)) (soloCombo (solo P7) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 P7 P15 in C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6)) (soloCombo (solo P7) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of C6 P23 C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P22 (classCombo C6))) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Forza-Pizza
	 ClassComboContext:= n:fiery, n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:fiery and is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ClassComboContext:= n:chicken
	 SomeValuesFrom2Context:= v:is-made {a}  n:chicken
	 SoloSomeContext:= v:is-made {a}  n:chicken
	 ClassComboContext:= n:garlic
	 ClassComboContext:= n:smoky, n:chilli-powder , n:garlic
	 SomeValuesFrom2Context:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic
	 SoloSomeContext:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic
	 ClassComboContext:= n:chilli-flakes
	 SomeValuesFrom2Context:= v:dried {a}  n:chilli-flakes
	 SoloSomeContext:= v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 IntersectionOf1Context:= v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 IntersectionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 UnionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 RexprContext:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 StartContext:={Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes.
SynTrans Text: {Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes.

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 C6 P23 C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C6))) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Forza-Pizza
	 ClassComboContext:= n:fiery, n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:fiery and is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ClassComboContext:= n:chicken
	 SomeValuesFrom2Context:= v:is-made-of {a}  n:chicken
	 SoloSomeContext:= v:is-made-of {a}  n:chicken
	 ClassComboContext:= n:garlic
	 ClassComboContext:= n:smoky, n:chilli-powder , n:garlic
	 SomeValuesFrom2Context:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic
	 SoloSomeContext:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic
	 ClassComboContext:= n:chilli-flakes
	 SomeValuesFrom2Context:= v:dried {a}  n:chilli-flakes
	 SoloSomeContext:= v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 ComboSoloContext:= v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 IntersectionOf1Context:= v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 IntersectionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 UnionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 RexprContext:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes
	 StartContext:={Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes.
SynTrans Text: {Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic and  v:dried {a}  n:chilli-flakes.

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of P11 P23 C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22)) (soloCombo (solo P11) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of P11 P23 C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22)) (soloCombo (solo P11) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 chicken P23 C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 P7 C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 chicken P23 C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 P7 C7 , C8 and P24 C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8)))) and (soloCombo (solo (someValuesFrom P24 (classCombo C9))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of C6 P15 in C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P22 (classCombo C6))) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8 and (classCombo C9))))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Forza-Pizza
	 ClassComboContext:= n:fiery, n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:fiery and is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ClassComboContext:= n:chicken
	 SomeValuesFrom2Context:= v:is-made {a}  n:chicken
	 SoloSomeContext:= v:is-made {a}  n:chicken
	 ClassComboContext:= n:chilli-flakes
	 ClassComboContext:= n:garlic and n:chilli-flakes
	 ClassComboContext:= n:smoky, n:chilli-powder , n:garlic and n:chilli-flakes
	 SomeValuesFrom2Context:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 SoloSomeContext:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 ComboSoloContext:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 ComboSoloContext:= v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 IntersectionOf1Context:= v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 IntersectionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 UnionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 RexprContext:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 StartContext:={Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes.
SynTrans Text: {Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes.

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of C6 P15 in C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P22 (classCombo C6))) (soloCombo (solo (someValuesFrom P15 (classCombo C7)))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 C6 P15 in C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C6))) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8 and (classCombo C9))))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Forza-Pizza
	 ClassComboContext:= n:fiery, n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:fiery and is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ClassComboContext:= n:chicken
	 SomeValuesFrom2Context:= v:is-made-of {a}  n:chicken
	 SoloSomeContext:= v:is-made-of {a}  n:chicken
	 ClassComboContext:= n:chilli-flakes
	 ClassComboContext:= n:garlic and n:chilli-flakes
	 ClassComboContext:= n:smoky, n:chilli-powder , n:garlic and n:chilli-flakes
	 SomeValuesFrom2Context:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 SoloSomeContext:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 ComboSoloContext:= v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 ComboSoloContext:= v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 IntersectionOf1Context:= v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 IntersectionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 UnionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 RexprContext:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes
	 StartContext:={Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes.
SynTrans Text: {Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated {a}  n:smoky and v:marinated {a}  n:chilli-powder  and v:marinated {a}  n:garlic  and v:marinated {a}  n:chilli-flakes.

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 C6 P15 in C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C6))) (soloCombo (solo (someValuesFrom P15 (classCombo C7)))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of chicken P15 in C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of P11 in C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22)) (soloCombo (solo (someValuesFrom P11 (classCombo C7)))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of chicken P15 in C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of P11 in C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22)) (soloCombo (solo (someValuesFrom P11 (classCombo C7)))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 P7 P15 in C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6)) (soloCombo (solo P7) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 P7 P15 in C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6)) (soloCombo (solo P7) P15) (soloCombo (solo (classCombo C7))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 P7 P15 in C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6)) (soloCombo (solo P7) (soloCombo (solo (someValuesFrom P15 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 P7 P15 in C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6)) (soloCombo (solo P7) P15) (soloCombo (solo (classCombo C7))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of C6 P23 C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P22 (classCombo C6))) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8 and (classCombo C9))))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Forza-Pizza
	 ClassComboContext:= n:fiery, n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:fiery and is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ClassComboContext:= n:chicken
	 SomeValuesFrom2Context:= v:is-made {a}  n:chicken
	 SoloSomeContext:= v:is-made {a}  n:chicken
	 ClassComboContext:= n:chilli-flakes
	 ClassComboContext:= n:garlic and n:chilli-flakes
	 ClassComboContext:= n:smoky, n:chilli-powder , n:garlic and n:chilli-flakes
	 SomeValuesFrom2Context:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 SoloSomeContext:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 ComboSoloContext:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 ComboSoloContext:= v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 IntersectionOf1Context:= v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 IntersectionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 UnionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 RexprContext:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 StartContext:={Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes.
SynTrans Text: {Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes.

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of C6 P23 C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P22 (classCombo C6))) (soloCombo (solo (someValuesFrom P23 (classCombo C7)))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 C6 P23 C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C6))) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8 and (classCombo C9))))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Forza-Pizza
	 ClassComboContext:= n:fiery, n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:fiery and is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:fiery and is {a}  n:a-pizza
	 ClassComboContext:= n:chicken
	 SomeValuesFrom2Context:= v:is-made-of {a}  n:chicken
	 SoloSomeContext:= v:is-made-of {a}  n:chicken
	 ClassComboContext:= n:chilli-flakes
	 ClassComboContext:= n:garlic and n:chilli-flakes
	 ClassComboContext:= n:smoky, n:chilli-powder , n:garlic and n:chilli-flakes
	 SomeValuesFrom2Context:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 SoloSomeContext:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 ComboSoloContext:= v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 ComboSoloContext:= v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 IntersectionOf1Context:= v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 IntersectionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 UnionOf1Context:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 RexprContext:= is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes
	 StartContext:={Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes.
SynTrans Text: {Every, A} n:Pollo-Forza-Pizza is {a}  n:fiery and is {a}  n:a-pizza and  v:is-made-of {a}  n:chicken and  v:marinated-in {a}  n:smoky and v:marinated-in {a}  n:chilli-powder  and v:marinated-in {a}  n:garlic  and v:marinated-in {a}  n:chilli-flakes.

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 C6 P23 C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C6))) (soloCombo (solo (someValuesFrom P23 (classCombo C7)))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of P11 P23 C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22)) (soloCombo (solo P11) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of P11 P23 C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22)) (soloCombo (solo P11) P23) (soloCombo (solo (classCombo C7))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of P11 P23 C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22)) (soloCombo (solo P11) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P22 of P11 P23 C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P22)) (soloCombo (solo P11) P23) (soloCombo (solo (classCombo C7))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 chicken P23 C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 P7 C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6)) (soloCombo (solo (someValuesFrom P7 (classCombo C7)))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 chicken P23 C7 , C8 and dried C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6) (soloCombo (solo (someValuesFrom P23 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Forza Pizza is a fiery pizza which is made of chicken marinated in smoky chilli powder, garlic and dried chilli flakes.
TString: I0 P21 C5 which P6 P7 C7 , C8 and P8 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P21 (classCombo C5)))) which (intersectionOf (soloCombo solo (soloCombo (solo P6)) (soloCombo (solo (someValuesFrom P7 (classCombo C7)))) , (soloCombo (solo (classCombo C8))) and (soloCombo solo) (soloCombo (solo P8))))))) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 P11 C6 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C6))) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 SoloSomeContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 UnionOf1Context:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 RexprContext:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 StartContext:={Every, A} n:pizza is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:pizza is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 C6 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C6))) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Luhjuhman-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 SoloSomeContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 UnionOf1Context:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 RexprContext:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 StartContext:={Every, A} n:Luhjuhman-pizza is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:Luhjuhman-pizza is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 C6 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C6))) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Luhjuhman-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 SoloSomeContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 UnionOf1Context:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 RexprContext:= is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 StartContext:={Every, A} n:Luhjuhman-pizza is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:Luhjuhman-pizza is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 C6 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6))) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Luhjuhman-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 SoloSomeContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 RexprContext:= v:pizza-is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 StartContext:={Every, A} n:Luhjuhman-pizza v:pizza-is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:Luhjuhman-pizza v:pizza-is {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 P10 C6 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C6))) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:is-a-pizza-made-with {a}  n:a-pizza
	 SoloSomeContext:= v:is-a-pizza-made-with {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 SoloSomeContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 IntersectionOf1Context:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 UnionOf1Context:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 RexprContext:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 StartContext:={Every, A} n:pizza v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:pizza v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P10 C6 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C6))) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Luhjuhman-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:is-a-pizza-made-with {a}  n:a-pizza
	 SoloSomeContext:= v:is-a-pizza-made-with {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 SoloSomeContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 ComboSoloContext:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 IntersectionOf1Context:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 UnionOf1Context:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 RexprContext:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese
	 StartContext:={Every, A} n:Luhjuhman-pizza v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:Luhjuhman-pizza v:is-a-pizza-made-with {a}  n:a-pizza and  v:made {a}  n:lamb  and v:made {a}  n:vegetables  and v:made {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P10 C6 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P10 C6 P7 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 P11 a pizza P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 a (classCombo a))) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 P5 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P11 P5 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 P11 a pizza P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 a (classCombo a))) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 P5 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P11 P5 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 a pizza P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 a (classCombo a))) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P5 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P5 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 a pizza P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 a (classCombo a))) (soloCombo (solo (someValuesFrom P7 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P5 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P5 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 is P3 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf P3 P7 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P10 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P10 P7 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 is P3 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf P3 P7 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P10 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P10 P7 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P3 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P3 P7 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P10 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P10 P7 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P3 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P3 P7 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P10 P7 with C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P10 P7 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 P11 C6 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C6))) (soloCombo (solo (someValuesFrom P12 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 SoloSomeContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 UnionOf1Context:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 RexprContext:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 StartContext:={Every, A} n:pizza is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:pizza is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 C6 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C6))) (soloCombo (solo (someValuesFrom P12 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Luhjuhman-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 SoloSomeContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 UnionOf1Context:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 RexprContext:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 StartContext:={Every, A} n:Luhjuhman-pizza is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:Luhjuhman-pizza is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 C6 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C6))) (soloCombo (solo (someValuesFrom P12 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Luhjuhman-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 SoloSomeContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 UnionOf1Context:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 RexprContext:= is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 StartContext:={Every, A} n:Luhjuhman-pizza is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:Luhjuhman-pizza is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 C6 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6))) (soloCombo (solo (someValuesFrom P12 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Luhjuhman-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 SoloSomeContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 RexprContext:= v:pizza-is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 StartContext:={Every, A} n:Luhjuhman-pizza v:pizza-is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:Luhjuhman-pizza v:pizza-is {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 P10 C6 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C6))) (soloCombo (solo (someValuesFrom P12 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:is-a-pizza-made-with {a}  n:a-pizza
	 SoloSomeContext:= v:is-a-pizza-made-with {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 SoloSomeContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 IntersectionOf1Context:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 UnionOf1Context:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 RexprContext:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 StartContext:={Every, A} n:pizza v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:pizza v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P10 C6 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C6))) (soloCombo (solo (someValuesFrom P12 (classCombo C7 , (classCombo C8 , and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Luhjuhman-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:is-a-pizza-made-with {a}  n:a-pizza
	 SoloSomeContext:= v:is-a-pizza-made-with {a}  n:a-pizza
	 ClassComboContext:= n:feta-cheese
	 ClassComboContext:= n:vegetables , and n:feta-cheese
	 ClassComboContext:= n:lamb , n:vegetables , and n:feta-cheese
	 SomeValuesFrom2Context:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 SoloSomeContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 ComboSoloContext:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 IntersectionOf1Context:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 UnionOf1Context:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 RexprContext:= v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese
	 StartContext:={Every, A} n:Luhjuhman-pizza v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.
SynTrans Text: {Every, A} n:Luhjuhman-pizza v:is-a-pizza-made-with {a}  n:a-pizza and  v:made-with {a}  n:lamb  and v:made-with {a}  n:vegetables  and v:made-with {a}  n:feta-cheese.

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P10 C6 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P10 C6 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 P11 P5 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf P11 P5 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 P5 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P11 P5 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 P11 P5 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf P11 P5 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 P5 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P11 P5 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 P5 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P11 P5 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P5 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P5 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P11 P5 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P11 P5 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P5 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P5 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 is P3 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf P3 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P10 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P10 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: C5 is P3 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf P3 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P10 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P10 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P3 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P3 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P10 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P10 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P3 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P3 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: Luhjuhman pizza is a pizza made with lamb, vegetables, and feta cheese.
TString: I0 P4 P10 P12 C7 , C8 , and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P4 P10 P12 C7 , C8 , and C9)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P11 C4 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo (solo (someValuesFrom P11 (classCombo C4))) (soloCombo (solo (someValuesFrom P7 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 seasons pizza P11 C4 P7 with C5 . 
Parse Tree: (start (lexpr N0 a) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C4))) (soloCombo (solo (someValuesFrom P7 (classCombo C5)))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 C4 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C4))) (soloCombo (solo (someValuesFrom P7 (classCombo C5)))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P10 C4 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo (solo (someValuesFrom P10 (classCombo C4))) (soloCombo (solo (someValuesFrom P7 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P10 C4 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P10 C4 P7 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P11 a pizza P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo (solo (someValuesFrom P11 a (classCombo a))) (soloCombo (solo (someValuesFrom P7 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P11 P5 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P11) (soloCombo (solo (someValuesFrom P5 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P11 a pizza P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo (solo (someValuesFrom P11 a (classCombo a))) (soloCombo (solo (someValuesFrom P7 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P11 P5 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P11) (soloCombo (solo (someValuesFrom P5 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 seasons pizza P11 a pizza P7 with C5 . 
Parse Tree: (start (lexpr N0 a) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 a (classCombo a))) (soloCombo (solo (someValuesFrom P7 (classCombo C5)))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P5 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P5 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 seasons pizza P11 a pizza P7 with C5 . 
Parse Tree: (start (lexpr N0 a) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 a (classCombo a))) (soloCombo (solo (someValuesFrom P7 (classCombo C5)))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P5 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P5 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 is P3 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P3) (soloCombo (solo (someValuesFrom P7 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P10 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P10) (soloCombo (solo (someValuesFrom P7 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 is P3 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P3) (soloCombo (solo (someValuesFrom P7 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P10 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P10) (soloCombo (solo (someValuesFrom P7 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P3 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P3 P7 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P10 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P10 P7 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P3 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P3 P7 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P10 P7 with C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P10 P7 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P11 C4 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo (solo (someValuesFrom P11 (classCombo C4))) (soloCombo (solo (someValuesFrom P12 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 seasons pizza P11 C4 P12 C5 . 
Parse Tree: (start (lexpr N0 a) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C4))) (soloCombo (solo (someValuesFrom P12 (classCombo C5)))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 C4 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C4))) (soloCombo (solo (someValuesFrom P12 (classCombo C5)))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P10 C4 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo (solo (someValuesFrom P10 (classCombo C4))) (soloCombo (solo (someValuesFrom P12 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P10 C4 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P10 C4 P12 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P11 P5 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P11) P5) (soloCombo (solo (someValuesFrom P12 (classCombo C5)))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P11 P5 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P11) P5) (soloCombo (solo (someValuesFrom P12 (classCombo C5)))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 seasons pizza P11 P5 P12 C5 . 
Parse Tree: (start (lexpr N0 a) (rexpr (unionOf P11 P5 P12 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P5 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P5 P12 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 seasons pizza P11 P5 P12 C5 . 
Parse Tree: (start (lexpr N0 a) (rexpr (unionOf P11 P5 P12 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P5 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P5 P12 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 is P3 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P3) (soloCombo (solo (someValuesFrom P12 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P10 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P10) (soloCombo (solo (someValuesFrom P12 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 is P3 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P3) (soloCombo (solo (someValuesFrom P12 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 C3 P10 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf (intersectionOf (soloCombo (solo (classCombo C3)) (soloCombo solo) (soloCombo (solo P10) (soloCombo (solo (someValuesFrom P12 (classCombo C5))))))))) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P3 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P3 P12 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P10 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P10 P12 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P3 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P3 P12 C5)) .)
Invalid TEDEI!

Input Text: The four seasons pizza is a pizza finished with olives.
TString: N0 P4 P10 P12 C5 . 
Parse Tree: (start (lexpr N0) (rexpr (unionOf P4 P10 P12 C5)) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: C3 P15 C4 which P10 of a delicious P11 of C5 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo (solo (someValuesFrom P10 a (classCombo P11 C5)))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P15 C4 which P10 of P8 of C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P10) (soloCombo (solo (someValuesFrom P8 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P15 C4 which P10 of a delicious P11 of C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo (solo (someValuesFrom P10 a (classCombo P11 C5)))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P6 C4 which P10 of P8 of C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P10) (soloCombo (solo (someValuesFrom P8 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: C3 P15 C4 which P16 a delicious P11 of C5 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo (solo (someValuesFrom P16 a (classCombo P11 C5)))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P15 C4 which P16 P8 of C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P8 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P15 C4 which P16 a delicious P11 of C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo (solo (someValuesFrom P16 a (classCombo P11 C5)))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P6 C4 which P16 P8 of C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16) (soloCombo (solo (someValuesFrom P8 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: C3 P15 C4 which P10 of P8 P17 C5 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P10)) (soloCombo (solo P8) (soloCombo (solo (someValuesFrom P17 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P15 C4 which P10 of P8 P17 C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P10)) (soloCombo (solo P8) (soloCombo (solo (someValuesFrom P17 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P15 C4 which P10 of P8 P17 C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P10)) (soloCombo (solo P8) (soloCombo (solo (someValuesFrom P17 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P6 C4 which P10 of P8 P17 C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P10)) (soloCombo (solo P8) (soloCombo (solo (someValuesFrom P17 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: C3 P15 C4 which P16 P8 P17 C5 . 
Parse Tree: (start (lexpr C3) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16)) (soloCombo (solo P8) (soloCombo (solo (someValuesFrom P17 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P15 C4 which P16 P8 P17 C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16)) (soloCombo (solo P8) (soloCombo (solo (someValuesFrom P17 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P15 C4 which P16 P8 P17 C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16)) (soloCombo (solo P8) (soloCombo (solo (someValuesFrom P17 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A Quattro Formaggi pizza is a pizza which consists of a delicious blend of mozzarella cheese.
TString: I0 P6 C4 which P16 P8 P17 C5 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C4)))) which (intersectionOf (soloCombo solo (soloCombo (solo P16)) (soloCombo (solo P8) (soloCombo (solo (someValuesFrom P17 (classCombo C5)))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: C10 P11 with C11 , C12 , C13 , P12 C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start (lexpr C10) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C11 , (classCombo C12 , (classCombo C13))))) , (soloCombo (solo (someValuesFrom P12 (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
	 Lexpr1Context:={Every, A} n:gardiniera-pizza
	 ClassComboContext:= n:red, n:peppers
	 ClassComboContext:= n:mushrooms , n:red, n:peppers
	 ClassComboContext:= n:artichokes , n:mushrooms , n:red, n:peppers
	 SomeValuesFrom2Context:= v:is-made {a}  n:artichokes  and v:is-made {a}  n:mushrooms  and v:is-made {a}  n:red and v:is-made {a}  n:peppers
	 SoloSomeContext:= v:is-made {a}  n:artichokes  and v:is-made {a}  n:mushrooms  and v:is-made {a}  n:red and v:is-made {a}  n:peppers
	 ClassComboContext:= n:pesto-base
	 ClassComboContext:= n:tomato and n:pesto-base
	 ClassComboContext:= n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:santos-tomatoes , n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 SomeValuesFrom2Context:= v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 SoloSomeContext:= v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 ComboSoloContext:= v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 ComboSoloContext:= v:is-made {a}  n:artichokes  and v:is-made {a}  n:mushrooms  and v:is-made {a}  n:red and v:is-made {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 IntersectionOf1Context:= v:is-made {a}  n:artichokes  and v:is-made {a}  n:mushrooms  and v:is-made {a}  n:red and v:is-made {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 UnionOf1Context:= v:is-made {a}  n:artichokes  and v:is-made {a}  n:mushrooms  and v:is-made {a}  n:red and v:is-made {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 RexprContext:= v:is-made {a}  n:artichokes  and v:is-made {a}  n:mushrooms  and v:is-made {a}  n:red and v:is-made {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 StartContext:={Every, A} n:gardiniera-pizza v:is-made {a}  n:artichokes  and v:is-made {a}  n:mushrooms  and v:is-made {a}  n:red and v:is-made {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base.
SynTrans Text: {Every, A} n:gardiniera-pizza v:is-made {a}  n:artichokes  and v:is-made {a}  n:mushrooms  and v:is-made {a}  n:red and v:is-made {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base.

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P11 with C11 , C12 , C13 , P12 C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C11 , (classCombo C12 , (classCombo C13))))) , (soloCombo (solo (someValuesFrom P12 (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P5 with C11 , C12 , C13 , P12 C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P5 (classCombo C11 , (classCombo C12 , (classCombo C13))))) , (soloCombo (solo (someValuesFrom P12 (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P3 P11 with C11 , C12 , C13 , P12 C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P11 C11 , C12 , C13 , P12 C14 , C15 , C16 , C17 , C18 and C9)) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: C10 P1 C11 , C12 , C13 , P12 C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start (lexpr C10) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P1 (classCombo C11 , (classCombo C12 , (classCombo C13))))) , (soloCombo (solo (someValuesFrom P12 (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
	 Lexpr1Context:={Every, A} n:gardiniera-pizza
	 ClassComboContext:= n:red, n:peppers
	 ClassComboContext:= n:mushrooms , n:red, n:peppers
	 ClassComboContext:= n:artichokes , n:mushrooms , n:red, n:peppers
	 SomeValuesFrom2Context:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers
	 SoloSomeContext:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers
	 ClassComboContext:= n:pesto-base
	 ClassComboContext:= n:tomato and n:pesto-base
	 ClassComboContext:= n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:santos-tomatoes , n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 SomeValuesFrom2Context:= v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 SoloSomeContext:= v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 ComboSoloContext:= v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 ComboSoloContext:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 IntersectionOf1Context:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 UnionOf1Context:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 RexprContext:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base
	 StartContext:={Every, A} n:gardiniera-pizza v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base.
SynTrans Text: {Every, A} n:gardiniera-pizza v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers and  v:marinated {a}  n:santos-tomatoes  and v:marinated {a}  n:leeks  and v:marinated {a}  n:olives  and v:marinated {a}  n:garlic and v:marinated {a}  n:oil  and v:marinated {a}  n:tomato  and v:marinated {a}  n:pesto-base.

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P5 P1 C11 , C12 , C13 , P12 C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P5 P1 C11 , C12 , C13 , P12 C14 , C15 , C16 , C17 , C18 and C9)) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P1 C11 , C12 , C13 , P12 C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P1 (classCombo C11 , (classCombo C12 , (classCombo C13))))) , (soloCombo (solo (someValuesFrom P12 (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P3 C11 , C12 , C13 , P12 C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C11 , (classCombo C12 , (classCombo C13))))) , (soloCombo (solo (someValuesFrom P12 (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: C10 P11 with C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start (lexpr C10) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo (solo a) (soloCombo (solo (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: C10 P11 with C11 , C12 , C13 , P4 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start (lexpr C10) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo solo) (soloCombo (solo P4) , (soloCombo (solo (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: C10 P11 with C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start (lexpr C10) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo (solo a) (soloCombo (solo (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: C10 P11 with C11 , C12 , C13 , P4 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start (lexpr C10) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo solo) (soloCombo (solo P4) , (soloCombo (solo (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P11 with C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo (solo a) (soloCombo (solo (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P5 with C11 , C12 , C13 , P4 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P5 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo solo) (soloCombo (solo P4) , (soloCombo (solo (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P11 with C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo (solo a) (soloCombo (solo (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P5 with C11 , C12 , C13 , P4 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P5 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo solo) (soloCombo (solo P4) , (soloCombo (solo (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9)))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P3 P11 with C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P11 C11 , C12 , C13 , a C14 , C15 , C16 , C17 , C18 and C9)) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P3 P11 with C11 , C12 , C13 , P4 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P11 C11 , C12 , C13 , P4 , C15 , C16 , C17 , C18 and C9)) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P3 P11 with C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P11 C11 , C12 , C13 , a C14 , C15 , C16 , C17 , C18 and C9)) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P3 P11 with C11 , C12 , C13 , P4 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P3 P11 C11 , C12 , C13 , P4 , C15 , C16 , C17 , C18 and C9)) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: C10 P1 C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start (lexpr C10) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P1 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo (solo a) (soloCombo (solo (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: C10 P1 C11 , C12 , C13 , C20 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start (lexpr C10) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P1 (classCombo C11 , (classCombo C12 , (classCombo C13 , (classCombo C20 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))))) .)
	 Lexpr1Context:={Every, A} n:gardiniera-pizza
	 ClassComboContext:= n:pesto-base
	 ClassComboContext:= n:tomato and n:pesto-base
	 ClassComboContext:= n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:marinated-santos-tomatoes , n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:red, n:peppers , n:marinated-santos-tomatoes , n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:mushrooms , n:red, n:peppers , n:marinated-santos-tomatoes , n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:artichokes , n:mushrooms , n:red, n:peppers , n:marinated-santos-tomatoes , n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 SomeValuesFrom2Context:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 SoloSomeContext:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 ComboSoloContext:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 IntersectionOf1Context:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 UnionOf1Context:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 RexprContext:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 StartContext:={Every, A} n:gardiniera-pizza v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base.
SynTrans Text: {Every, A} n:gardiniera-pizza v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base.

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: C10 P1 C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start (lexpr C10) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P1 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo (solo a) (soloCombo (solo (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: C10 P1 C11 , C12 , C13 , C20 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start (lexpr C10) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P1 (classCombo C11 , (classCombo C12 , (classCombo C13 , (classCombo C20 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))))) .)
	 Lexpr1Context:={Every, A} n:gardiniera-pizza
	 ClassComboContext:= n:pesto-base
	 ClassComboContext:= n:tomato and n:pesto-base
	 ClassComboContext:= n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:marinated-santos-tomatoes , n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:red, n:peppers , n:marinated-santos-tomatoes , n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:mushrooms , n:red, n:peppers , n:marinated-santos-tomatoes , n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 ClassComboContext:= n:artichokes , n:mushrooms , n:red, n:peppers , n:marinated-santos-tomatoes , n:leeks , n:olives , n:garlic, n:oil , n:tomato and n:pesto-base
	 SomeValuesFrom2Context:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 SoloSomeContext:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 ComboSoloContext:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 IntersectionOf1Context:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 UnionOf1Context:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 RexprContext:= v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base
	 StartContext:={Every, A} n:gardiniera-pizza v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base.
SynTrans Text: {Every, A} n:gardiniera-pizza v:is-made-with {a}  n:artichokes  and v:is-made-with {a}  n:mushrooms  and v:is-made-with {a}  n:red and v:is-made-with {a}  n:peppers  and v:is-made-with {a}  n:marinated-santos-tomatoes  and v:is-made-with {a}  n:leeks  and v:is-made-with {a}  n:olives  and v:is-made-with {a}  n:garlic and v:is-made-with {a}  n:oil  and v:is-made-with {a}  n:tomato  and v:is-made-with {a}  n:pesto-base.

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P5 P1 C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P5 P1 C11 , C12 , C13 , a C14 , C15 , C16 , C17 , C18 and C9)) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P5 P1 C11 , C12 , C13 , C20 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P5 P1 C11 , C12 , C13 , C20 , C15 , C16 , C17 , C18 and C9)) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P5 P1 C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P5 P1 C11 , C12 , C13 , a C14 , C15 , C16 , C17 , C18 and C9)) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P5 P1 C11 , C12 , C13 , C20 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf P5 P1 C11 , C12 , C13 , C20 , C15 , C16 , C17 , C18 and C9)) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P1 C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P1 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo (solo a) (soloCombo (solo (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P3 C11 , C12 , C13 , C20 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C11 , (classCombo C12 , (classCombo C13 , (classCombo C20 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P1 C11 , C12 , C13 , marinated C14 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P1 (classCombo C11))) , (soloCombo (solo (classCombo C12))) , (soloCombo (solo (classCombo C13))) , (soloCombo (solo a) (soloCombo (solo (classCombo C14 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))) .)
Invalid TEDEI!

Input Text: A gardiniera pizza is made with artichokes, mushrooms, red peppers, marinated santos tomatoes, leeks, olives, garlic oil, tomato and pesto base.
TString: P3 C11 , C12 , C13 , C20 , C15 , C16 , C17 , C18 and C9 . 
Parse Tree: (start lexpr (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P3 (classCombo C11 , (classCombo C12 , (classCombo C13 , (classCombo C20 , (classCombo C15 , (classCombo C16 , (classCombo C17 , (classCombo C18 and (classCombo C9))))))))))))))) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 C5 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 C5 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 C5 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 C5 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza-dough
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P15 C5 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 SoloSomeContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 C5 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 SoloSomeContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 C5 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 C5 P10 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 a pizza dough P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 a (classCombo a))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 a pizza dough P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 a (classCombo a))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 a pizza dough P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 a (classCombo a))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P7 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P7 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 a pizza dough P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 a (classCombo a))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P7 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P7 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 is P4 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P10 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P15 P10 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 is P4 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P10 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P15 P10 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P4 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P4 P10 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 P10 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P4 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P4 P10 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 P10 with C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 P10 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 C5 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 C5 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 C5 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 C5 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza-dough
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P15 C5 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 SoloSomeContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 C5 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P11 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 SoloSomeContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 C5 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 C5 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 P7 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P16 P7 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 P7 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P16 P7 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P7 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P7 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P7 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P7 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 is P4 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P15 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 is P4 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P15 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P4 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P4 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P4 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P4 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 P17 C6 and P11 with C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 P17 C6 and P11 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 C5 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 C5 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 C5 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 C5 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza-dough
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza v:pizza-is {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P15 C5 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 SoloSomeContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 C5 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 SoloSomeContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled {a}  n:goat-cheese
	 SoloSomeContext:= v:filled {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 C5 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 C5 P10 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 a pizza dough P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 a (classCombo a))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 a pizza dough P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 a (classCombo a))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 a pizza dough P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 a (classCombo a))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P7 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P7 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 a pizza dough P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 a (classCombo a))) (soloCombo (solo (someValuesFrom P10 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P7 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P7 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 is P4 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P10 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P15 P10 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 is P4 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P10 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P15 P10 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P4 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P4 P10 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 P10 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P4 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P4 P10 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 P10 with C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 P10 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 C5 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 C5 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 C5 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= is {a}  n:a-pizza-dough
	 SoloSomeContext:= is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 C5 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza-dough
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza v:pizza-is {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P15 C5 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 SoloSomeContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 C5 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P15 (classCombo C5))) (soloCombo (solo (someValuesFrom P17 (classCombo C6))) and (soloCombo (solo (someValuesFrom P18 (classCombo C7))))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-pizza
	 ClassComboContext:= n:a-pizza-dough
	 SomeValuesFrom2Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 SoloSomeContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough
	 ClassComboContext:= n:goat-cheese
	 SomeValuesFrom2Context:= v:filled-with {a}  n:goat-cheese
	 SoloSomeContext:= v:filled-with {a}  n:goat-cheese
	 ClassComboContext:= n:homemade-tomato-marmalade
	 SomeValuesFrom2Context:= v:served-with {a}  n:homemade-tomato-marmalade
	 SoloSomeContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 ComboSoloContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 IntersectionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 UnionOf1Context:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 RexprContext:= v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade
	 StartContext:={Every, A} n:Caprina-pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.
SynTrans Text: {Every, A} n:Caprina-pizza v:is-a-pizza-dough-filled-with {a}  n:a-pizza-dough and  v:filled-with {a}  n:goat-cheese and  v:served-with {a}  n:homemade-tomato-marmalade.

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 C5 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 C5 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 P7 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P16 P7 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 P16 P7 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P16 P7 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P7 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P7 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P16 P7 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P16 P7 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P7 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P7 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 is P4 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P15 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: C4 is P4 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P4 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P15 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P15 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P4 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P4 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P4 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P4 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina pizza is a pizza dough filled with goat cheese and served with homemade tomato marmalade.
TString: I0 P6 P15 P17 C6 and P18 C7 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P15 P17 C6 and P18 C7)) .)
Invalid TEDEI!

Input Text: Caprina Pizza has a very high-calorie content.
TString: I0 P5 a very C1 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P5 a (classCombo C1))))))) .)
	 Lexpr2Context:={Every, A} n:Caprina-Pizza
	 ClassComboContext:= n:high-calorie, n:content
	 SomeValuesFrom2Context:= v:has a  n:high-calorie and v:has a  n:content
	 SoloSomeContext:= v:has a  n:high-calorie and v:has a  n:content
	 ComboSoloContext:= v:has a  n:high-calorie and v:has a  n:content
	 IntersectionOf1Context:= v:has a  n:high-calorie and v:has a  n:content
	 UnionOf1Context:= v:has a  n:high-calorie and v:has a  n:content
	 RexprContext:= v:has a  n:high-calorie and v:has a  n:content
	 StartContext:={Every, A} n:Caprina-Pizza v:has a  n:high-calorie and v:has a  n:content.
SynTrans Text: {Every, A} n:Caprina-Pizza v:has a  n:high-calorie and v:has a  n:content.

Input Text: Sloppy giuseppe pizza is topped with mozzarella and parmesan and rich Bolognese ragu.
TString: C4 P1 P5 with C5 and C6 and C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf P1 P5 C5 and C6 and C7)) .)
Invalid TEDEI!

Input Text: Sloppy giuseppe pizza is topped with mozzarella and parmesan and rich Bolognese ragu.
TString: P2 P1 P5 with C5 and C6 and C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P2 P1 P5 C5 and C6 and C7)) .)
Invalid TEDEI!

Input Text: Sloppy giuseppe pizza is topped with mozzarella and parmesan and rich Bolognese ragu.
TString: C4 P0 C5 and C6 and C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P0 (classCombo C5 and (classCombo C6 and (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:Sloppy-giuseppe-pizza
	 ClassComboContext:= n:rich-Bolognese, n:ragu
	 ClassComboContext:= n:parmesan and n:rich-Bolognese, n:ragu
	 ClassComboContext:= n:mozzarella and n:parmesan and n:rich-Bolognese, n:ragu
	 SomeValuesFrom2Context:= v:is-topped-with {a}  n:mozzarella  and v:is-topped-with {a}  n:parmesan  and v:is-topped-with {a}  n:rich-Bolognese and v:is-topped-with {a}  n:ragu
	 SoloSomeContext:= v:is-topped-with {a}  n:mozzarella  and v:is-topped-with {a}  n:parmesan  and v:is-topped-with {a}  n:rich-Bolognese and v:is-topped-with {a}  n:ragu
	 ComboSoloContext:= v:is-topped-with {a}  n:mozzarella  and v:is-topped-with {a}  n:parmesan  and v:is-topped-with {a}  n:rich-Bolognese and v:is-topped-with {a}  n:ragu
	 IntersectionOf1Context:= v:is-topped-with {a}  n:mozzarella  and v:is-topped-with {a}  n:parmesan  and v:is-topped-with {a}  n:rich-Bolognese and v:is-topped-with {a}  n:ragu
	 UnionOf1Context:= v:is-topped-with {a}  n:mozzarella  and v:is-topped-with {a}  n:parmesan  and v:is-topped-with {a}  n:rich-Bolognese and v:is-topped-with {a}  n:ragu
	 RexprContext:= v:is-topped-with {a}  n:mozzarella  and v:is-topped-with {a}  n:parmesan  and v:is-topped-with {a}  n:rich-Bolognese and v:is-topped-with {a}  n:ragu
	 StartContext:={Every, A} n:Sloppy-giuseppe-pizza v:is-topped-with {a}  n:mozzarella  and v:is-topped-with {a}  n:parmesan  and v:is-topped-with {a}  n:rich-Bolognese and v:is-topped-with {a}  n:ragu.
SynTrans Text: {Every, A} n:Sloppy-giuseppe-pizza v:is-topped-with {a}  n:mozzarella  and v:is-topped-with {a}  n:parmesan  and v:is-topped-with {a}  n:rich-Bolognese and v:is-topped-with {a}  n:ragu.

Input Text: Sloppy giuseppe pizza is topped with mozzarella and parmesan and rich Bolognese ragu.
TString: C4 P1 C5 and C6 and C7 . 
Parse Tree: (start (lexpr C4) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P1 (classCombo C5 and (classCombo C6 and (classCombo C7))))))))) .)
	 Lexpr1Context:={Every, A} n:Sloppy-giuseppe-pizza
	 ClassComboContext:= n:rich-Bolognese, n:ragu
	 ClassComboContext:= n:parmesan and n:rich-Bolognese, n:ragu
	 ClassComboContext:= n:mozzarella and n:parmesan and n:rich-Bolognese, n:ragu
	 SomeValuesFrom2Context:= v:giuseppe-pizza-is-topped-with {a}  n:mozzarella  and v:giuseppe-pizza-is-topped-with {a}  n:parmesan  and v:giuseppe-pizza-is-topped-with {a}  n:rich-Bolognese and v:giuseppe-pizza-is-topped-with {a}  n:ragu
	 SoloSomeContext:= v:giuseppe-pizza-is-topped-with {a}  n:mozzarella  and v:giuseppe-pizza-is-topped-with {a}  n:parmesan  and v:giuseppe-pizza-is-topped-with {a}  n:rich-Bolognese and v:giuseppe-pizza-is-topped-with {a}  n:ragu
	 ComboSoloContext:= v:giuseppe-pizza-is-topped-with {a}  n:mozzarella  and v:giuseppe-pizza-is-topped-with {a}  n:parmesan  and v:giuseppe-pizza-is-topped-with {a}  n:rich-Bolognese and v:giuseppe-pizza-is-topped-with {a}  n:ragu
	 IntersectionOf1Context:= v:giuseppe-pizza-is-topped-with {a}  n:mozzarella  and v:giuseppe-pizza-is-topped-with {a}  n:parmesan  and v:giuseppe-pizza-is-topped-with {a}  n:rich-Bolognese and v:giuseppe-pizza-is-topped-with {a}  n:ragu
	 UnionOf1Context:= v:giuseppe-pizza-is-topped-with {a}  n:mozzarella  and v:giuseppe-pizza-is-topped-with {a}  n:parmesan  and v:giuseppe-pizza-is-topped-with {a}  n:rich-Bolognese and v:giuseppe-pizza-is-topped-with {a}  n:ragu
	 RexprContext:= v:giuseppe-pizza-is-topped-with {a}  n:mozzarella  and v:giuseppe-pizza-is-topped-with {a}  n:parmesan  and v:giuseppe-pizza-is-topped-with {a}  n:rich-Bolognese and v:giuseppe-pizza-is-topped-with {a}  n:ragu
	 StartContext:={Every, A} n:Sloppy-giuseppe-pizza v:giuseppe-pizza-is-topped-with {a}  n:mozzarella  and v:giuseppe-pizza-is-topped-with {a}  n:parmesan  and v:giuseppe-pizza-is-topped-with {a}  n:rich-Bolognese and v:giuseppe-pizza-is-topped-with {a}  n:ragu.
SynTrans Text: {Every, A} n:Sloppy-giuseppe-pizza v:giuseppe-pizza-is-topped-with {a}  n:mozzarella  and v:giuseppe-pizza-is-topped-with {a}  n:parmesan  and v:giuseppe-pizza-is-topped-with {a}  n:rich-Bolognese and v:giuseppe-pizza-is-topped-with {a}  n:ragu.

Input Text: Sloppy giuseppe pizza is topped with mozzarella and parmesan and rich Bolognese ragu.
TString: P2 P0 C5 and C6 and C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P2 P0 C5 and C6 and C7)) .)
Invalid TEDEI!

Input Text: Sloppy giuseppe pizza is topped with mozzarella and parmesan and rich Bolognese ragu.
TString: P2 P1 C5 and C6 and C7 . 
Parse Tree: (start lexpr (rexpr (unionOf P2 P1 C5 and C6 and C7)) .)
Invalid TEDEI!

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P16 with C6 , C7 , P17 C8 and C9 , and P12 with C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C6 , (classCombo C7)))) , (soloCombo (solo (someValuesFrom P17 (classCombo C8 and (classCombo C9)))) , and (soloCombo (solo (someValuesFrom P12 (classCombo C10 and (classCombo C11)))))))))) .)
	 Lexpr2Context:={Every, A} n:Pianta-Pizza
	 ClassComboContext:= n:chestnut-mushrooms
	 ClassComboContext:= n:spinach , n:chestnut-mushrooms
	 SomeValuesFrom2Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms
	 SoloSomeContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms
	 ClassComboContext:= n:artichoke
	 ClassComboContext:= n:kernels and n:artichoke
	 SomeValuesFrom2Context:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke
	 SoloSomeContext:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke
	 ClassComboContext:= n:extra-virgin, n:olive-oil
	 ClassComboContext:= n:rocket and n:extra-virgin, n:olive-oil
	 SomeValuesFrom2Context:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 SoloSomeContext:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 ComboSoloContext:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 ComboSoloContext:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 ComboSoloContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 IntersectionOf1Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 UnionOf1Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 RexprContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 StartContext:={Every, A} n:Pianta-Pizza v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil.
SynTrans Text: {Every, A} n:Pianta-Pizza v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil.

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P4 C6 , C7 , P17 C8 and C9 , and P12 with C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6 , (classCombo C7)))) , (soloCombo (solo (someValuesFrom P17 (classCombo C8 and (classCombo C9)))) , and (soloCombo (solo (someValuesFrom P12 (classCombo C10 and (classCombo C11)))))))))) .)
	 Lexpr2Context:={Every, A} n:Pianta-Pizza
	 ClassComboContext:= n:chestnut-mushrooms
	 ClassComboContext:= n:spinach , n:chestnut-mushrooms
	 SomeValuesFrom2Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms
	 SoloSomeContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms
	 ClassComboContext:= n:artichoke
	 ClassComboContext:= n:kernels and n:artichoke
	 SomeValuesFrom2Context:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke
	 SoloSomeContext:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke
	 ClassComboContext:= n:extra-virgin, n:olive-oil
	 ClassComboContext:= n:rocket and n:extra-virgin, n:olive-oil
	 SomeValuesFrom2Context:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 SoloSomeContext:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 ComboSoloContext:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 ComboSoloContext:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 ComboSoloContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 IntersectionOf1Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 UnionOf1Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 RexprContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 StartContext:={Every, A} n:Pianta-Pizza v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil.
SynTrans Text: {Every, A} n:Pianta-Pizza v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil.

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P16 with C6 , C7 , pine C8 and C9 , and P12 with C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C6 , (classCombo C7 , (classCombo C8 and (classCombo C9)))))) , and (soloCombo (solo (someValuesFrom P12 (classCombo C10 and (classCombo C11))))))))) .)
	 Lexpr2Context:={Every, A} n:Pianta-Pizza
	 ClassComboContext:= n:artichoke
	 ClassComboContext:= n:kernels and n:artichoke
	 ClassComboContext:= n:chestnut-mushrooms , n:kernels and n:artichoke
	 ClassComboContext:= n:spinach , n:chestnut-mushrooms , n:kernels and n:artichoke
	 SomeValuesFrom2Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke
	 SoloSomeContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke
	 ClassComboContext:= n:extra-virgin, n:olive-oil
	 ClassComboContext:= n:rocket and n:extra-virgin, n:olive-oil
	 SomeValuesFrom2Context:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 SoloSomeContext:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 ComboSoloContext:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 ComboSoloContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 IntersectionOf1Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 UnionOf1Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 RexprContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 StartContext:={Every, A} n:Pianta-Pizza v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil.
SynTrans Text: {Every, A} n:Pianta-Pizza v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil.

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P16 with C6 , C7 , P5 and C9 , and P12 with C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C6))) , (soloCombo (solo (classCombo C7))) , (soloCombo solo) (soloCombo (solo P5) and (soloCombo (solo (classCombo C9)) , and (soloCombo (solo (someValuesFrom P12 (classCombo C10 and (classCombo C11))))))))))) .)
Invalid TEDEI!

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P4 C6 , C7 , pine C8 and C9 , and P12 with C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6 , (classCombo C7 , (classCombo C8 and (classCombo C9)))))) , and (soloCombo (solo (someValuesFrom P12 (classCombo C10 and (classCombo C11))))))))) .)
	 Lexpr2Context:={Every, A} n:Pianta-Pizza
	 ClassComboContext:= n:artichoke
	 ClassComboContext:= n:kernels and n:artichoke
	 ClassComboContext:= n:chestnut-mushrooms , n:kernels and n:artichoke
	 ClassComboContext:= n:spinach , n:chestnut-mushrooms , n:kernels and n:artichoke
	 SomeValuesFrom2Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke
	 SoloSomeContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke
	 ClassComboContext:= n:extra-virgin, n:olive-oil
	 ClassComboContext:= n:rocket and n:extra-virgin, n:olive-oil
	 SomeValuesFrom2Context:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 SoloSomeContext:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 ComboSoloContext:= v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 ComboSoloContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 IntersectionOf1Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 UnionOf1Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 RexprContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil
	 StartContext:={Every, A} n:Pianta-Pizza v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil.
SynTrans Text: {Every, A} n:Pianta-Pizza v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished {a}  n:rocket  and v:finished {a}  n:extra-virgin and v:finished {a}  n:olive-oil.

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P4 C6 , C7 , P5 and C9 , and P12 with C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6))) , (soloCombo (solo (classCombo C7))) , (soloCombo solo) (soloCombo (solo P5) and (soloCombo (solo (classCombo C9)) , and (soloCombo (solo (someValuesFrom P12 (classCombo C10 and (classCombo C11))))))))))) .)
Invalid TEDEI!

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P16 with C6 , C7 , P17 C8 and C9 , and P18 C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C6 , (classCombo C7)))) , (soloCombo (solo (someValuesFrom P17 (classCombo C8 and (classCombo C9)))) , and (soloCombo (solo (someValuesFrom P18 (classCombo C10 and (classCombo C11)))))))))) .)
	 Lexpr2Context:={Every, A} n:Pianta-Pizza
	 ClassComboContext:= n:chestnut-mushrooms
	 ClassComboContext:= n:spinach , n:chestnut-mushrooms
	 SomeValuesFrom2Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms
	 SoloSomeContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms
	 ClassComboContext:= n:artichoke
	 ClassComboContext:= n:kernels and n:artichoke
	 SomeValuesFrom2Context:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke
	 SoloSomeContext:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke
	 ClassComboContext:= n:extra-virgin, n:olive-oil
	 ClassComboContext:= n:rocket and n:extra-virgin, n:olive-oil
	 SomeValuesFrom2Context:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 SoloSomeContext:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 ComboSoloContext:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 ComboSoloContext:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 ComboSoloContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 IntersectionOf1Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 UnionOf1Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 RexprContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 StartContext:={Every, A} n:Pianta-Pizza v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil.
SynTrans Text: {Every, A} n:Pianta-Pizza v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil.

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P4 C6 , C7 , P17 C8 and C9 , and P18 C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6 , (classCombo C7)))) , (soloCombo (solo (someValuesFrom P17 (classCombo C8 and (classCombo C9)))) , and (soloCombo (solo (someValuesFrom P18 (classCombo C10 and (classCombo C11)))))))))) .)
	 Lexpr2Context:={Every, A} n:Pianta-Pizza
	 ClassComboContext:= n:chestnut-mushrooms
	 ClassComboContext:= n:spinach , n:chestnut-mushrooms
	 SomeValuesFrom2Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms
	 SoloSomeContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms
	 ClassComboContext:= n:artichoke
	 ClassComboContext:= n:kernels and n:artichoke
	 SomeValuesFrom2Context:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke
	 SoloSomeContext:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke
	 ClassComboContext:= n:extra-virgin, n:olive-oil
	 ClassComboContext:= n:rocket and n:extra-virgin, n:olive-oil
	 SomeValuesFrom2Context:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 SoloSomeContext:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 ComboSoloContext:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 ComboSoloContext:= v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 ComboSoloContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 IntersectionOf1Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 UnionOf1Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 RexprContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 StartContext:={Every, A} n:Pianta-Pizza v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil.
SynTrans Text: {Every, A} n:Pianta-Pizza v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms and  v:pine {a}  n:kernels  and v:pine {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil.

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P16 with C6 , C7 , pine C8 and C9 , and P18 C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C6 , (classCombo C7 , (classCombo C8 and (classCombo C9)))))) , and (soloCombo (solo (someValuesFrom P18 (classCombo C10 and (classCombo C11))))))))) .)
	 Lexpr2Context:={Every, A} n:Pianta-Pizza
	 ClassComboContext:= n:artichoke
	 ClassComboContext:= n:kernels and n:artichoke
	 ClassComboContext:= n:chestnut-mushrooms , n:kernels and n:artichoke
	 ClassComboContext:= n:spinach , n:chestnut-mushrooms , n:kernels and n:artichoke
	 SomeValuesFrom2Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke
	 SoloSomeContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke
	 ClassComboContext:= n:extra-virgin, n:olive-oil
	 ClassComboContext:= n:rocket and n:extra-virgin, n:olive-oil
	 SomeValuesFrom2Context:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 SoloSomeContext:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 ComboSoloContext:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 ComboSoloContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 IntersectionOf1Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 UnionOf1Context:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 RexprContext:= v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 StartContext:={Every, A} n:Pianta-Pizza v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil.
SynTrans Text: {Every, A} n:Pianta-Pizza v:is-topped {a}  n:spinach  and v:is-topped {a}  n:chestnut-mushrooms  and v:is-topped {a}  n:kernels  and v:is-topped {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil.

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P16 with C6 , C7 , P5 and C9 , and P18 C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P16 (classCombo C6))) , (soloCombo (solo (classCombo C7))) , (soloCombo solo) (soloCombo (solo P5) and (soloCombo (solo (classCombo C9)) , and (soloCombo (solo (someValuesFrom P18 (classCombo C10 and (classCombo C11))))))))))) .)
Invalid TEDEI!

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P4 C6 , C7 , pine C8 and C9 , and P18 C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6 , (classCombo C7 , (classCombo C8 and (classCombo C9)))))) , and (soloCombo (solo (someValuesFrom P18 (classCombo C10 and (classCombo C11))))))))) .)
	 Lexpr2Context:={Every, A} n:Pianta-Pizza
	 ClassComboContext:= n:artichoke
	 ClassComboContext:= n:kernels and n:artichoke
	 ClassComboContext:= n:chestnut-mushrooms , n:kernels and n:artichoke
	 ClassComboContext:= n:spinach , n:chestnut-mushrooms , n:kernels and n:artichoke
	 SomeValuesFrom2Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke
	 SoloSomeContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke
	 ClassComboContext:= n:extra-virgin, n:olive-oil
	 ClassComboContext:= n:rocket and n:extra-virgin, n:olive-oil
	 SomeValuesFrom2Context:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 SoloSomeContext:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 ComboSoloContext:= v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 ComboSoloContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 IntersectionOf1Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 UnionOf1Context:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 RexprContext:= v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil
	 StartContext:={Every, A} n:Pianta-Pizza v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil.
SynTrans Text: {Every, A} n:Pianta-Pizza v:is-topped-with {a}  n:spinach  and v:is-topped-with {a}  n:chestnut-mushrooms  and v:is-topped-with {a}  n:kernels  and v:is-topped-with {a}  n:artichoke and  v:finished-with {a}  n:rocket  and v:finished-with {a}  n:extra-virgin and v:finished-with {a}  n:olive-oil.

Input Text: Pianta Pizza is topped with spinach, chestnut mushrooms, pine kernels and artichoke, and finished with rocket and extra virgin olive oil.
TString: I0 P4 C6 , C7 , P5 and C9 , and P18 C10 and C11 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6))) , (soloCombo (solo (classCombo C7))) , (soloCombo solo) (soloCombo (solo P5) and (soloCombo (solo (classCombo C9)) , and (soloCombo (solo (someValuesFrom P18 (classCombo C10 and (classCombo C11))))))))))) .)
Invalid TEDEI!

Input Text: Frutti di Mare typically lacks cheese.
TString: I0 typically P6 C1 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf all P6 C1)) .)
Invalid TEDEI!

Input Text: Frutti di Mare typically lacks cheese.
TString: I0 typically lacks C1 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf all C1)) .)
Invalid TEDEI!

Input Text: Frutti di Mare typically lacks cheese.
TString: I0 typically P2 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf all P2)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P10 with C2 P11 atop C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C2))) (soloCombo (solo (someValuesFrom P11 a (classCombo C3)))))))) .)
	 Lexpr2Context:={Every, A} n:Frutti-di-Mare
	 ClassComboContext:= n:the-seafood-being
	 SomeValuesFrom2Context:= v:is-made {a}  n:the-seafood-being
	 SoloSomeContext:= v:is-made {a}  n:the-seafood-being
	 ClassComboContext:= n:a-tomato-sauce
	 SomeValuesFrom2Context:= v:being-served a  n:a-tomato-sauce
	 SoloSomeContext:= v:being-served a  n:a-tomato-sauce
	 ComboSoloContext:= v:being-served a  n:a-tomato-sauce
	 ComboSoloContext:= v:is-made {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce
	 IntersectionOf1Context:= v:is-made {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce
	 UnionOf1Context:= v:is-made {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce
	 RexprContext:= v:is-made {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce
	 StartContext:={Every, A} n:Frutti-di-Mare v:is-made {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce.
SynTrans Text: {Every, A} n:Frutti-di-Mare v:is-made {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce.

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P2 C2 P11 atop C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P2 (classCombo C2))) (soloCombo (solo (someValuesFrom P11 a (classCombo C3)))))))) .)
	 Lexpr2Context:={Every, A} n:Frutti-di-Mare
	 ClassComboContext:= n:the-seafood-being
	 SomeValuesFrom2Context:= v:is-made-with {a}  n:the-seafood-being
	 SoloSomeContext:= v:is-made-with {a}  n:the-seafood-being
	 ClassComboContext:= n:a-tomato-sauce
	 SomeValuesFrom2Context:= v:being-served a  n:a-tomato-sauce
	 SoloSomeContext:= v:being-served a  n:a-tomato-sauce
	 ComboSoloContext:= v:being-served a  n:a-tomato-sauce
	 ComboSoloContext:= v:is-made-with {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce
	 IntersectionOf1Context:= v:is-made-with {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce
	 UnionOf1Context:= v:is-made-with {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce
	 RexprContext:= v:is-made-with {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce
	 StartContext:={Every, A} n:Frutti-di-Mare v:is-made-with {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce.
SynTrans Text: {Every, A} n:Frutti-di-Mare v:is-made-with {a}  n:the-seafood-being and  v:being-served a  n:a-tomato-sauce.

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P10 with the seafood P11 atop C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P10 P11 a C3)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P10 with P5 atop C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P10 P5 a C3)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P10 with the seafood P11 atop C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P10 P11 a C3)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P10 with P5 atop C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P10 P5 a C3)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P2 P3 P11 atop C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P2 P3 P11 a C3)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P2 P3 P11 atop C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P2 P3 P11 a C3)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P10 with C2 P1 C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C2))) (soloCombo (solo (someValuesFrom P1 (classCombo C3)))))))) .)
	 Lexpr2Context:={Every, A} n:Frutti-di-Mare
	 ClassComboContext:= n:the-seafood-being
	 SomeValuesFrom2Context:= v:is-made {a}  n:the-seafood-being
	 SoloSomeContext:= v:is-made {a}  n:the-seafood-being
	 ClassComboContext:= n:a-tomato-sauce
	 SomeValuesFrom2Context:= v:being-served-atop {a}  n:a-tomato-sauce
	 SoloSomeContext:= v:being-served-atop {a}  n:a-tomato-sauce
	 ComboSoloContext:= v:being-served-atop {a}  n:a-tomato-sauce
	 ComboSoloContext:= v:is-made {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce
	 IntersectionOf1Context:= v:is-made {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce
	 UnionOf1Context:= v:is-made {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce
	 RexprContext:= v:is-made {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce
	 StartContext:={Every, A} n:Frutti-di-Mare v:is-made {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce.
SynTrans Text: {Every, A} n:Frutti-di-Mare v:is-made {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce.

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P2 C2 P1 C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P2 (classCombo C2))) (soloCombo (solo (someValuesFrom P1 (classCombo C3)))))))) .)
	 Lexpr2Context:={Every, A} n:Frutti-di-Mare
	 ClassComboContext:= n:the-seafood-being
	 SomeValuesFrom2Context:= v:is-made-with {a}  n:the-seafood-being
	 SoloSomeContext:= v:is-made-with {a}  n:the-seafood-being
	 ClassComboContext:= n:a-tomato-sauce
	 SomeValuesFrom2Context:= v:being-served-atop {a}  n:a-tomato-sauce
	 SoloSomeContext:= v:being-served-atop {a}  n:a-tomato-sauce
	 ComboSoloContext:= v:being-served-atop {a}  n:a-tomato-sauce
	 ComboSoloContext:= v:is-made-with {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce
	 IntersectionOf1Context:= v:is-made-with {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce
	 UnionOf1Context:= v:is-made-with {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce
	 RexprContext:= v:is-made-with {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce
	 StartContext:={Every, A} n:Frutti-di-Mare v:is-made-with {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce.
SynTrans Text: {Every, A} n:Frutti-di-Mare v:is-made-with {a}  n:the-seafood-being and  v:being-served-atop {a}  n:a-tomato-sauce.

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P10 with P5 P1 C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P10 P5 P1 C3)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P10 with P5 P1 C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P10 P5 P1 C3)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P2 the seafood P1 C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P2 P1 C3)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P2 P3 C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P2 P3 C3)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P2 the seafood P1 C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P2 P1 C3)) .)
Invalid TEDEI!

Input Text: Frutti di Mare is made with the seafood being served atop a tomato sauce.
TString: I0 P2 P3 C3 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P2 P3 C3)) .)
Invalid TEDEI!

Input Text: The Prince Carlo pizza is a pizza which contains among other ingredients, leeks and rosemary.
TString: C5 P10 C6 which P7 among C7 , C8 and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P7 a (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:rosemary
	 ClassComboContext:= n:leeks and n:rosemary
	 ClassComboContext:= n:other, n:ingredients , n:leeks and n:rosemary
	 SomeValuesFrom2Context:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 SoloSomeContext:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 ComboSoloContext:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 IntersectionOf1Context:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 UnionOf1Context:= is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 RexprContext:= is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 StartContext:={Every, A} n:pizza is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary.
SynTrans Text: {Every, A} n:pizza is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary.

Input Text: The Prince Carlo pizza is a pizza which contains among other ingredients, leeks and rosemary.
TString: I0 P10 C6 which P7 among C7 , C8 and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P7 a (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Prince-Carlo-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:rosemary
	 ClassComboContext:= n:leeks and n:rosemary
	 ClassComboContext:= n:other, n:ingredients , n:leeks and n:rosemary
	 SomeValuesFrom2Context:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 SoloSomeContext:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 ComboSoloContext:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 IntersectionOf1Context:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 UnionOf1Context:= is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 RexprContext:= is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 StartContext:={Every, A} n:Prince-Carlo-pizza is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary.
SynTrans Text: {Every, A} n:Prince-Carlo-pizza is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary.

Input Text: The Prince Carlo pizza is a pizza which contains among other ingredients, leeks and rosemary.
TString: I0 P10 C6 which P7 among C7 , C8 and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P7 a (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Prince-Carlo-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:rosemary
	 ClassComboContext:= n:leeks and n:rosemary
	 ClassComboContext:= n:other, n:ingredients , n:leeks and n:rosemary
	 SomeValuesFrom2Context:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 SoloSomeContext:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 ComboSoloContext:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 IntersectionOf1Context:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 UnionOf1Context:= is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 RexprContext:= is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 StartContext:={Every, A} n:Prince-Carlo-pizza is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary.
SynTrans Text: {Every, A} n:Prince-Carlo-pizza is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary.

Input Text: The Prince Carlo pizza is a pizza which contains among other ingredients, leeks and rosemary.
TString: I0 P4 C6 which P7 among C7 , C8 and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P7 a (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Prince-Carlo-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza
	 ClassComboContext:= n:rosemary
	 ClassComboContext:= n:leeks and n:rosemary
	 ClassComboContext:= n:other, n:ingredients , n:leeks and n:rosemary
	 SomeValuesFrom2Context:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 SoloSomeContext:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 ComboSoloContext:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 IntersectionOf1Context:= v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 RexprContext:= v:pizza-is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary
	 StartContext:={Every, A} n:Prince-Carlo-pizza v:pizza-is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary.
SynTrans Text: {Every, A} n:Prince-Carlo-pizza v:pizza-is {a}  n:a-pizza and  v:contains a  n:other and v:contains a  n:ingredients  and v:contains a  n:leeks  and v:contains a  n:rosemary.

Input Text: The Prince Carlo pizza is a pizza which contains among other ingredients, leeks and rosemary.
TString: C5 P10 C6 which P11 C7 , C8 and C9 . 
Parse Tree: (start (lexpr C5) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:rosemary
	 ClassComboContext:= n:leeks and n:rosemary
	 ClassComboContext:= n:other, n:ingredients , n:leeks and n:rosemary
	 SomeValuesFrom2Context:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 SoloSomeContext:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 ComboSoloContext:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 IntersectionOf1Context:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 UnionOf1Context:= is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 RexprContext:= is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 StartContext:={Every, A} n:pizza is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary.
SynTrans Text: {Every, A} n:pizza is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary.

Input Text: The Prince Carlo pizza is a pizza which contains among other ingredients, leeks and rosemary.
TString: I0 P10 C6 which P11 C7 , C8 and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Prince-Carlo-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:rosemary
	 ClassComboContext:= n:leeks and n:rosemary
	 ClassComboContext:= n:other, n:ingredients , n:leeks and n:rosemary
	 SomeValuesFrom2Context:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 SoloSomeContext:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 ComboSoloContext:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 IntersectionOf1Context:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 UnionOf1Context:= is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 RexprContext:= is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 StartContext:={Every, A} n:Prince-Carlo-pizza is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary.
SynTrans Text: {Every, A} n:Prince-Carlo-pizza is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary.

Input Text: The Prince Carlo pizza is a pizza which contains among other ingredients, leeks and rosemary.
TString: I0 P10 C6 which P11 C7 , C8 and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P10 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Prince-Carlo-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= is {a}  n:a-pizza
	 SoloSomeContext:= is {a}  n:a-pizza
	 ComboSoloContext:= is {a}  n:a-pizza
	 ClassComboContext:= n:rosemary
	 ClassComboContext:= n:leeks and n:rosemary
	 ClassComboContext:= n:other, n:ingredients , n:leeks and n:rosemary
	 SomeValuesFrom2Context:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 SoloSomeContext:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 ComboSoloContext:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 IntersectionOf1Context:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 IntersectionOf1Context:= is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 UnionOf1Context:= is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 RexprContext:= is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 StartContext:={Every, A} n:Prince-Carlo-pizza is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary.
SynTrans Text: {Every, A} n:Prince-Carlo-pizza is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary.

Input Text: The Prince Carlo pizza is a pizza which contains among other ingredients, leeks and rosemary.
TString: I0 P4 C6 which P11 C7 , C8 and C9 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P4 (classCombo C6)))) which (intersectionOf (soloCombo (solo (someValuesFrom P11 (classCombo C7 , (classCombo C8 and (classCombo C9)))))))))) .)
	 Lexpr2Context:={Every, A} n:Prince-Carlo-pizza
	 ClassComboContext:= n:a-pizza
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-pizza
	 SoloSomeContext:= v:pizza-is {a}  n:a-pizza
	 ComboSoloContext:= v:pizza-is {a}  n:a-pizza
	 ClassComboContext:= n:rosemary
	 ClassComboContext:= n:leeks and n:rosemary
	 ClassComboContext:= n:other, n:ingredients , n:leeks and n:rosemary
	 SomeValuesFrom2Context:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 SoloSomeContext:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 ComboSoloContext:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 IntersectionOf1Context:= v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 UnionOf1Context:= v:pizza-is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 RexprContext:= v:pizza-is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary
	 StartContext:={Every, A} n:Prince-Carlo-pizza v:pizza-is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary.
SynTrans Text: {Every, A} n:Prince-Carlo-pizza v:pizza-is {a}  n:a-pizza and  v:contains-among {a}  n:other and v:contains-among {a}  n:ingredients  and v:contains-among {a}  n:leeks  and v:contains-among {a}  n:rosemary.

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P13 C8 of C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-kind
	 SomeValuesFrom2Context:= is {a}  n:a-kind
	 SoloSomeContext:= is {a}  n:a-kind
	 ClassComboContext:= n:pizza
	 SoloClsContext:= n:pizza
	 ComboSoloContext:= n:pizza
	 ComboSoloContext:= is {a}  n:a-kind and  n:pizza
	 ClassComboContext:= n:red, n:onions
	 ClassComboContext:= n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:chicken , n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 SomeValuesFrom2Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 SoloSomeContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 ComboSoloContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 UnionOf1Context:= is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 RexprContext:= is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 StartContext:={Every, A} n:pizza is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.
SynTrans Text: {Every, A} n:pizza is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 C8 of C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Ad-Astra-pizza
	 ClassComboContext:= n:a-kind
	 SomeValuesFrom2Context:= is {a}  n:a-kind
	 SoloSomeContext:= is {a}  n:a-kind
	 ClassComboContext:= n:pizza
	 SoloClsContext:= n:pizza
	 ComboSoloContext:= n:pizza
	 ComboSoloContext:= is {a}  n:a-kind and  n:pizza
	 ClassComboContext:= n:red, n:onions
	 ClassComboContext:= n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:chicken , n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 SomeValuesFrom2Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 SoloSomeContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 ComboSoloContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 UnionOf1Context:= is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 RexprContext:= is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 StartContext:={Every, A} n:Pollo-Ad-Astra-pizza is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.
SynTrans Text: {Every, A} n:Pollo-Ad-Astra-pizza is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 C8 of C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Ad-Astra-pizza
	 ClassComboContext:= n:a-kind
	 SomeValuesFrom2Context:= is {a}  n:a-kind
	 SoloSomeContext:= is {a}  n:a-kind
	 ClassComboContext:= n:pizza
	 SoloClsContext:= n:pizza
	 ComboSoloContext:= n:pizza
	 ComboSoloContext:= is {a}  n:a-kind and  n:pizza
	 ClassComboContext:= n:red, n:onions
	 ClassComboContext:= n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:chicken , n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 SomeValuesFrom2Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 SoloSomeContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 ComboSoloContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 UnionOf1Context:= is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 RexprContext:= is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 StartContext:={Every, A} n:Pollo-Ad-Astra-pizza is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.
SynTrans Text: {Every, A} n:Pollo-Ad-Astra-pizza is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 C8 of C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Ad-Astra-pizza
	 ClassComboContext:= n:a-kind
	 SomeValuesFrom2Context:= v:pizza-is {a}  n:a-kind
	 SoloSomeContext:= v:pizza-is {a}  n:a-kind
	 ClassComboContext:= n:pizza
	 SoloClsContext:= n:pizza
	 ComboSoloContext:= n:pizza
	 ComboSoloContext:= v:pizza-is {a}  n:a-kind and  n:pizza
	 ClassComboContext:= n:red, n:onions
	 ClassComboContext:= n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:chicken , n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 SomeValuesFrom2Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 SoloSomeContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 ComboSoloContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:pizza-is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 UnionOf1Context:= v:pizza-is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 RexprContext:= v:pizza-is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 StartContext:={Every, A} n:Pollo-Ad-Astra-pizza v:pizza-is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.
SynTrans Text: {Every, A} n:Pollo-Ad-Astra-pizza v:pizza-is {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P12 C8 of C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:a-kind
	 SomeValuesFrom2Context:= v:is-a-kind-of {a}  n:a-kind
	 SoloSomeContext:= v:is-a-kind-of {a}  n:a-kind
	 ClassComboContext:= n:pizza
	 SoloClsContext:= n:pizza
	 ComboSoloContext:= n:pizza
	 ComboSoloContext:= v:is-a-kind-of {a}  n:a-kind and  n:pizza
	 ClassComboContext:= n:red, n:onions
	 ClassComboContext:= n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:chicken , n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 SomeValuesFrom2Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 SoloSomeContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 ComboSoloContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:is-a-kind-of {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 UnionOf1Context:= v:is-a-kind-of {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 RexprContext:= v:is-a-kind-of {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 StartContext:={Every, A} n:pizza v:is-a-kind-of {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.
SynTrans Text: {Every, A} n:pizza v:is-a-kind-of {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P12 C8 of C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Ad-Astra-pizza
	 ClassComboContext:= n:a-kind
	 SomeValuesFrom2Context:= v:is-a-kind-of {a}  n:a-kind
	 SoloSomeContext:= v:is-a-kind-of {a}  n:a-kind
	 ClassComboContext:= n:pizza
	 SoloClsContext:= n:pizza
	 ComboSoloContext:= n:pizza
	 ComboSoloContext:= v:is-a-kind-of {a}  n:a-kind and  n:pizza
	 ClassComboContext:= n:red, n:onions
	 ClassComboContext:= n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:chicken , n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 SomeValuesFrom2Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 SoloSomeContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 ComboSoloContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:is-a-kind-of {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 UnionOf1Context:= v:is-a-kind-of {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 RexprContext:= v:is-a-kind-of {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 StartContext:={Every, A} n:Pollo-Ad-Astra-pizza v:is-a-kind-of {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.
SynTrans Text: {Every, A} n:Pollo-Ad-Astra-pizza v:is-a-kind-of {a}  n:a-kind and  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P12 C8 of C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P12 C8 C9 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P3 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P3 C9 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P13 P3 C9 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P3 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P3 C9 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P12 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C9)))) that (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:pizza
	 SomeValuesFrom2Context:= v:is-a-kind-of {a}  n:pizza
	 SoloSomeContext:= v:is-a-kind-of {a}  n:pizza
	 ComboSoloContext:= v:is-a-kind-of {a}  n:pizza
	 ClassComboContext:= n:red, n:onions
	 ClassComboContext:= n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:chicken , n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 SomeValuesFrom2Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 SoloSomeContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 ComboSoloContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:is-a-kind-of {a}  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 UnionOf1Context:= v:is-a-kind-of {a}  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 RexprContext:= v:is-a-kind-of {a}  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 StartContext:={Every, A} n:pizza v:is-a-kind-of {a}  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.
SynTrans Text: {Every, A} n:pizza v:is-a-kind-of {a}  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P12 C1 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C1)))) that (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Ad-Astra-pizza
	 ClassComboContext:= n:a-kind-of-pizza
	 SomeValuesFrom2Context:= v:is-a-kind-of {a}  n:a-kind-of-pizza
	 SoloSomeContext:= v:is-a-kind-of {a}  n:a-kind-of-pizza
	 ComboSoloContext:= v:is-a-kind-of {a}  n:a-kind-of-pizza
	 ClassComboContext:= n:red, n:onions
	 ClassComboContext:= n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:chicken , n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 SomeValuesFrom2Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 SoloSomeContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 ComboSoloContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:is-a-kind-of {a}  n:a-kind-of-pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 UnionOf1Context:= v:is-a-kind-of {a}  n:a-kind-of-pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 RexprContext:= v:is-a-kind-of {a}  n:a-kind-of-pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 StartContext:={Every, A} n:Pollo-Ad-Astra-pizza v:is-a-kind-of {a}  n:a-kind-of-pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.
SynTrans Text: {Every, A} n:Pollo-Ad-Astra-pizza v:is-a-kind-of {a}  n:a-kind-of-pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P12 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C9)))) that (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
	 Lexpr1Context:={Every, A} n:pizza
	 ClassComboContext:= n:pizza
	 SomeValuesFrom2Context:= v:is-a-kind-of {a}  n:pizza
	 SoloSomeContext:= v:is-a-kind-of {a}  n:pizza
	 ComboSoloContext:= v:is-a-kind-of {a}  n:pizza
	 ClassComboContext:= n:red, n:onions
	 ClassComboContext:= n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:chicken , n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 SomeValuesFrom2Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 SoloSomeContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 ComboSoloContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:is-a-kind-of {a}  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 UnionOf1Context:= v:is-a-kind-of {a}  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 RexprContext:= v:is-a-kind-of {a}  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 StartContext:={Every, A} n:pizza v:is-a-kind-of {a}  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.
SynTrans Text: {Every, A} n:pizza v:is-a-kind-of {a}  n:pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P12 C1 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C1)))) that (intersectionOf (soloCombo (solo (someValuesFrom P14 (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
	 Lexpr2Context:={Every, A} n:Pollo-Ad-Astra-pizza
	 ClassComboContext:= n:a-kind-of-pizza
	 SomeValuesFrom2Context:= v:is-a-kind-of {a}  n:a-kind-of-pizza
	 SoloSomeContext:= v:is-a-kind-of {a}  n:a-kind-of-pizza
	 ComboSoloContext:= v:is-a-kind-of {a}  n:a-kind-of-pizza
	 ClassComboContext:= n:red, n:onions
	 ClassComboContext:= n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 ClassComboContext:= n:chicken , n:sweet, n:peppadew-peppers , n:cajun, n:spices , n:garlic, n:oil and n:red, n:onions
	 SomeValuesFrom2Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 SoloSomeContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 ComboSoloContext:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 IntersectionOf1Context:= v:is-a-kind-of {a}  n:a-kind-of-pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 UnionOf1Context:= v:is-a-kind-of {a}  n:a-kind-of-pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 RexprContext:= v:is-a-kind-of {a}  n:a-kind-of-pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions
	 StartContext:={Every, A} n:Pollo-Ad-Astra-pizza v:is-a-kind-of {a}  n:a-kind-of-pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.
SynTrans Text: {Every, A} n:Pollo-Ad-Astra-pizza v:is-a-kind-of {a}  n:a-kind-of-pizza and  v:contains {a}  n:chicken  and v:contains {a}  n:sweet and v:contains {a}  n:peppadew-peppers  and v:contains {a}  n:cajun and v:contains {a}  n:spices  and v:contains {a}  n:garlic and v:contains {a}  n:oil  and v:contains {a}  n:red and v:contains {a}  n:onions.

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P12 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P12 C9 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P12 C1 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P12 C1 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P12 C9 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P12 C9 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P12 C1 that P14 C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P12 C1 that P14 C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P13 C8 of C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo (solo a) (soloCombo (solo (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 C8 of C9 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo solo (soloCombo (solo P5) , (soloCombo (solo (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 C8 of C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P13 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo (solo a) (soloCombo (solo (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 C8 of C9 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P6 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo solo (soloCombo (solo P5) , (soloCombo (solo (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P12 C8 of C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo (solo a) (soloCombo (solo (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P12 C8 of C9 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C8))) (soloCombo (solo (classCombo C9)))) that (intersectionOf (soloCombo solo (soloCombo (solo P5) , (soloCombo (solo (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P12 C8 of C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P12 C8 C9 that a C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P12 C8 of C9 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P12 C8 C9 that P5 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P13 P3 C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf P13 P3 C9 that a C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 P3 C9 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P13 P3 C9 that P5 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P13 P3 C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf P13 P3 C9 that a C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 P3 C9 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P13 P3 C9 that P5 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 P3 C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P13 P3 C9 that a C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P3 C9 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P3 C9 that P5 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P13 P3 C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P13 P3 C9 that a C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P3 C9 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P3 C9 that P5 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P12 C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C9)))) that (intersectionOf (soloCombo (solo a) (soloCombo (solo (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P12 C1 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C1)))) that (intersectionOf (soloCombo solo (soloCombo (solo P5) , (soloCombo (solo (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: C7 P12 C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr C7) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C9)))) that (intersectionOf (soloCombo (solo a) (soloCombo (solo (classCombo C10 , (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P12 C1 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf (intersectionOf (soloCombo (solo (someValuesFrom P12 (classCombo C1)))) that (intersectionOf (soloCombo solo (soloCombo (solo P5) , (soloCombo (solo (classCombo C11 , (classCombo C12 , (classCombo C13 and (classCombo C14)))))))))))) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P12 C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P12 C9 that a C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P12 C1 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P12 C1 that P5 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P12 C9 that contains C10 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P12 C9 that a C10 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

Input Text: Pollo Ad Astra pizza is a kind of pizza that contains chicken, sweet peppadew peppers, cajun spices, garlic oil and red onions.
TString: I0 P6 P12 C1 that P5 , C11 , C12 , C13 and C14 . 
Parse Tree: (start (lexpr I0) (rexpr (unionOf P6 P12 C1 that P5 , C11 , C12 , C13 and C14)) .)
Invalid TEDEI!

        Total sentences:  677
  Valid TEDEI sentences:  157
Invalid TEDEI sentences:  520
6 sentences DO NOT HAVE valid TEDEI lexicalization
19 sentences HAVE valid TEDEI lexicalization
Elapsed Time: 3.849s
